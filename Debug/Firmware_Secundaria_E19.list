
Firmware_Secundaria_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073bc  080073bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  080073d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080073d0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c25  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  00033c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000366e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a49  00000000  00000000  00038720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157b9  00000000  00000000  0005c169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dce49  00000000  00000000  00071922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e76b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  0014e7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800737c 	.word	0x0800737c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800737c 	.word	0x0800737c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f002 fcba 	bl	8002e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f888 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fb22 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 faf8 	bl	8000b0c <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f8f4 	bl	8000708 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000520:	f000 fa5a 	bl	80009d8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000524:	f000 fa8e 	bl	8000a44 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000528:	f000 faba 	bl	8000aa0 <MX_TIM7_Init>
  MX_ADC2_Init();
 800052c:	f000 f9a0 	bl	8000870 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  Secundaria_Init(&hcan1, &hi2c1, &htim7);
 8000530:	4a37      	ldr	r2, [pc, #220]	; (8000610 <main+0x108>)
 8000532:	4938      	ldr	r1, [pc, #224]	; (8000614 <main+0x10c>)
 8000534:	4838      	ldr	r0, [pc, #224]	; (8000618 <main+0x110>)
 8000536:	f001 fa7d 	bl	8001a34 <Secundaria_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 800053a:	4b38      	ldr	r3, [pc, #224]	; (800061c <main+0x114>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <main+0x118>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	429a      	cmp	r2, r3
 8000544:	d30e      	bcc.n	8000564 <main+0x5c>
 8000546:	4b36      	ldr	r3, [pc, #216]	; (8000620 <main+0x118>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00a      	beq.n	8000564 <main+0x5c>
	{
		Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <main+0x114>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b33      	ldr	r3, [pc, #204]	; (8000620 <main+0x118>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	4a30      	ldr	r2, [pc, #192]	; (800061c <main+0x114>)
 800055a:	6013      	str	r3, [r2, #0]
		Secundaria_Transmit_Message(&hcan1, Analog_1_4);
 800055c:	2100      	movs	r1, #0
 800055e:	482e      	ldr	r0, [pc, #184]	; (8000618 <main+0x110>)
 8000560:	f001 fa3a 	bl	80019d8 <Secundaria_Transmit_Message>
	}

	if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <main+0x114>)
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <main+0x118>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d30e      	bcc.n	800058e <main+0x86>
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0x118>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00a      	beq.n	800058e <main+0x86>
	{
		Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <main+0x114>)
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <main+0x118>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	4a26      	ldr	r2, [pc, #152]	; (800061c <main+0x114>)
 8000584:	6053      	str	r3, [r2, #4]
		Secundaria_Transmit_Message(&hcan1, Analog_5_8);
 8000586:	2101      	movs	r1, #1
 8000588:	4823      	ldr	r0, [pc, #140]	; (8000618 <main+0x110>)
 800058a:	f001 fa25 	bl	80019d8 <Secundaria_Transmit_Message>
	}

	if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0x114>)
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0x118>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	429a      	cmp	r2, r3
 8000598:	d30e      	bcc.n	80005b8 <main+0xb0>
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <main+0x118>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00a      	beq.n	80005b8 <main+0xb0>
	{
		Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <main+0x114>)
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <main+0x118>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <main+0x114>)
 80005ae:	6093      	str	r3, [r2, #8]
		Secundaria_Transmit_Message(&hcan1, Analog_9_12);
 80005b0:	2102      	movs	r1, #2
 80005b2:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0x110>)
 80005b4:	f001 fa10 	bl	80019d8 <Secundaria_Transmit_Message>
	}

	if((Acc_Msg[Analog_13_16] >= Per_Msg[Analog_13_16]) && (Per_Msg[Analog_13_16] != 0))
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <main+0x114>)
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <main+0x118>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d30e      	bcc.n	80005e2 <main+0xda>
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0x118>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00a      	beq.n	80005e2 <main+0xda>
	{
		Acc_Msg[Analog_13_16] -= Per_Msg[Analog_13_16];
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <main+0x114>)
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0x118>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x114>)
 80005d8:	60d3      	str	r3, [r2, #12]
		Secundaria_Transmit_Message(&hcan1, Analog_13_16);
 80005da:	2103      	movs	r1, #3
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <main+0x110>)
 80005de:	f001 f9fb 	bl	80019d8 <Secundaria_Transmit_Message>
	}

	if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x114>)
 80005e4:	691a      	ldr	r2, [r3, #16]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x118>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d3a5      	bcc.n	800053a <main+0x32>
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <main+0x118>)
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0a1      	beq.n	800053a <main+0x32>
	{
		Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0x114>)
 80005f8:	691a      	ldr	r2, [r3, #16]
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0x118>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <main+0x114>)
 8000602:	6113      	str	r3, [r2, #16]
		Secundaria_Transmit_Message(&hcan1, Verify_Msg);
 8000604:	2104      	movs	r1, #4
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x110>)
 8000608:	f001 f9e6 	bl	80019d8 <Secundaria_Transmit_Message>
	if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 800060c:	e795      	b.n	800053a <main+0x32>
 800060e:	bf00      	nop
 8000610:	200001f4 	.word	0x200001f4
 8000614:	200001a0 	.word	0x200001a0
 8000618:	20000178 	.word	0x20000178
 800061c:	200002a8 	.word	0x200002a8
 8000620:	200002bc 	.word	0x200002bc

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 fe9a 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a25      	ldr	r2, [pc, #148]	; (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000698:	23b4      	movs	r3, #180	; 0xb4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f006 f87b 	bl	80067a8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fae0 	bl	8000c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f005 fcee 	bl	800609c <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 fad9 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fd27 	bl	800613c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f4:	f000 fac2 	bl	8000c7c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b52      	ldr	r3, [pc, #328]	; (8000864 <MX_ADC1_Init+0x15c>)
 800071c:	4a52      	ldr	r2, [pc, #328]	; (8000868 <MX_ADC1_Init+0x160>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MX_ADC1_Init+0x15c>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000730:	2201      	movs	r2, #1
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000736:	2201      	movs	r2, #1
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <MX_ADC1_Init+0x15c>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b46      	ldr	r3, [pc, #280]	; (8000864 <MX_ADC1_Init+0x15c>)
 800074a:	4a48      	ldr	r2, [pc, #288]	; (800086c <MX_ADC1_Init+0x164>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000754:	4b43      	ldr	r3, [pc, #268]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000756:	2208      	movs	r2, #8
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <MX_ADC1_Init+0x15c>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	483e      	ldr	r0, [pc, #248]	; (8000864 <MX_ADC1_Init+0x15c>)
 800076a:	f002 fbfd 	bl	8002f68 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 fa82 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000778:	230a      	movs	r3, #10
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000780:	2307      	movs	r3, #7
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4836      	ldr	r0, [pc, #216]	; (8000864 <MX_ADC1_Init+0x15c>)
 800078a:	f002 fd5f 	bl	800324c <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 fa72 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000798:	230b      	movs	r3, #11
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	482f      	ldr	r0, [pc, #188]	; (8000864 <MX_ADC1_Init+0x15c>)
 80007a6:	f002 fd51 	bl	800324c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b0:	f000 fa64 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007b4:	230c      	movs	r3, #12
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007b8:	2303      	movs	r3, #3
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4828      	ldr	r0, [pc, #160]	; (8000864 <MX_ADC1_Init+0x15c>)
 80007c2:	f002 fd43 	bl	800324c <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007cc:	f000 fa56 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007d0:	230d      	movs	r3, #13
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_ADC1_Init+0x15c>)
 80007de:	f002 fd35 	bl	800324c <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007e8:	f000 fa48 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007f0:	2305      	movs	r3, #5
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	481a      	ldr	r0, [pc, #104]	; (8000864 <MX_ADC1_Init+0x15c>)
 80007fa:	f002 fd27 	bl	800324c <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000804:	f000 fa3a 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000808:	2301      	movs	r3, #1
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800080c:	2306      	movs	r3, #6
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000816:	f002 fd19 	bl	800324c <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000820:	f000 fa2c 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000824:	2302      	movs	r3, #2
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000828:	2307      	movs	r3, #7
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_ADC1_Init+0x15c>)
 8000832:	f002 fd0b 	bl	800324c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800083c:	f000 fa1e 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000840:	2303      	movs	r3, #3
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_ADC1_Init+0x15c>)
 800084e:	f002 fcfd 	bl	800324c <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000858:	f000 fa10 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000028 	.word	0x20000028
 8000868:	40012000 	.word	0x40012000
 800086c:	0f000001 	.word	0x0f000001

08000870 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000882:	4b52      	ldr	r3, [pc, #328]	; (80009cc <MX_ADC2_Init+0x15c>)
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_ADC2_Init+0x160>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000888:	4b50      	ldr	r3, [pc, #320]	; (80009cc <MX_ADC2_Init+0x15c>)
 800088a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800088e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <MX_ADC2_Init+0x15c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <MX_ADC2_Init+0x15c>)
 8000898:	2201      	movs	r2, #1
 800089a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <MX_ADC2_Init+0x15c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b48      	ldr	r3, [pc, #288]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008b2:	4a48      	ldr	r2, [pc, #288]	; (80009d4 <MX_ADC2_Init+0x164>)
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 80008bc:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008be:	2208      	movs	r2, #8
 80008c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008c2:	4b42      	ldr	r3, [pc, #264]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d0:	483e      	ldr	r0, [pc, #248]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008d2:	f002 fb49 	bl	8002f68 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f9ce 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008e8:	2307      	movs	r3, #7
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4836      	ldr	r0, [pc, #216]	; (80009cc <MX_ADC2_Init+0x15c>)
 80008f2:	f002 fcab 	bl	800324c <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008fc:	f000 f9be 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000900:	2305      	movs	r3, #5
 8000902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	482f      	ldr	r0, [pc, #188]	; (80009cc <MX_ADC2_Init+0x15c>)
 800090e:	f002 fc9d 	bl	800324c <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000918:	f000 f9b0 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800091c:	2306      	movs	r3, #6
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000920:	2303      	movs	r3, #3
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <MX_ADC2_Init+0x15c>)
 800092a:	f002 fc8f 	bl	800324c <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000934:	f000 f9a2 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000938:	2307      	movs	r3, #7
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_ADC2_Init+0x15c>)
 8000946:	f002 fc81 	bl	800324c <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000950:	f000 f994 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000954:	230e      	movs	r3, #14
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000958:	2305      	movs	r3, #5
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_ADC2_Init+0x15c>)
 8000962:	f002 fc73 	bl	800324c <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800096c:	f000 f986 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000970:	230f      	movs	r3, #15
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000974:	2306      	movs	r3, #6
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_ADC2_Init+0x15c>)
 800097e:	f002 fc65 	bl	800324c <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8000988:	f000 f978 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800098c:	2308      	movs	r3, #8
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000990:	2307      	movs	r3, #7
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_ADC2_Init+0x15c>)
 800099a:	f002 fc57 	bl	800324c <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80009a4:	f000 f96a 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009a8:	2309      	movs	r3, #9
 80009aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_ADC2_Init+0x15c>)
 80009b6:	f002 fc49 	bl	800324c <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80009c0:	f000 f95c 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000070 	.word	0x20000070
 80009d0:	40012100 	.word	0x40012100
 80009d4:	0f000001 	.word	0x0f000001

080009d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_CAN1_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_CAN1_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_CAN1_Init+0x64>)
 80009e4:	2205      	movs	r2, #5
 80009e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_CAN1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_CAN1_Init+0x64>)
 80009f0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_CAN1_Init+0x64>)
 80009f8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_CAN1_Init+0x64>)
 8000a2a:	f002 febf 	bl	80037ac <HAL_CAN_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a34:	f000 f922 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000178 	.word	0x20000178
 8000a40:	40006400 	.word	0x40006400

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <MX_I2C1_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a82:	f004 fb75 	bl	8005170 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f8f6 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001a0 	.word	0x200001a0
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000ab0:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_TIM7_Init+0x68>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000ab6:	2259      	movs	r2, #89	; 0x59
 8000ab8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000ac2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000ad0:	f006 f908 	bl	8006ce4 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ada:	f000 f8cf 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM7_Init+0x64>)
 8000aec:	f006 fb8a 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000af6:	f000 f8c1 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001f4 	.word	0x200001f4
 8000b08:	40001400 	.word	0x40001400

08000b0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_DMA_Init+0x4c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <MX_DMA_Init+0x4c>)
 8000b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_DMA_Init+0x4c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2038      	movs	r0, #56	; 0x38
 8000b34:	f003 fdad 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b38:	2038      	movs	r0, #56	; 0x38
 8000b3a:	f003 fdc6 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	203a      	movs	r0, #58	; 0x3a
 8000b44:	f003 fda5 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b48:	203a      	movs	r0, #58	; 0x3a
 8000b4a:	f003 fdbe 	bl	80046ca <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b3e      	ldr	r3, [pc, #248]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a3d      	ldr	r2, [pc, #244]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2104      	movs	r1, #4
 8000c02:	481c      	ldr	r0, [pc, #112]	; (8000c74 <MX_GPIO_Init+0x118>)
 8000c04:	f004 fa80 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2138      	movs	r1, #56	; 0x38
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000c0e:	f004 fa7b 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ID_LR_Pin ID_FR_Pin */
  GPIO_InitStruct.Pin = ID_LR_Pin|ID_FR_Pin;
 8000c12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000c2a:	f004 f8d9 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <MX_GPIO_Init+0x118>)
 8000c46:	f004 f8cb 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin;
 8000c4a:	2338      	movs	r3, #56	; 0x38
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000c62:	f004 f8bd 	bl	8004de0 <HAL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40020400 	.word	0x40020400

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <Verify_Data>:
 */

#include "secundaria.h"

static void Verify_Data()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	Verify = 0;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <Verify_Data+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	e015      	b.n	8000cc6 <Verify_Data+0x3e>
		if(ADC_Buffer[i] > ADC_THRESHOLD)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <Verify_Data+0x9c>)
 8000c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca2:	2b5a      	cmp	r3, #90	; 0x5a
 8000ca4:	d90c      	bls.n	8000cc0 <Verify_Data+0x38>
			Verify |= (1 << i);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <Verify_Data+0x98>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <Verify_Data+0x98>)
 8000cbe:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d9e6      	bls.n	8000c9a <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <Verify_Data+0xa0>)
 8000cd0:	f004 fa33 	bl	800513a <HAL_GPIO_TogglePin>

	if((Verify_CAN & 1) == 1)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <Verify_Data+0xa4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <Verify_Data+0x64>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <Verify_Data+0xa0>)
 8000ce6:	f004 fa0f 	bl	8005108 <HAL_GPIO_WritePin>
 8000cea:	e004      	b.n	8000cf6 <Verify_Data+0x6e>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <Verify_Data+0xa0>)
 8000cf2:	f004 fa09 	bl	8005108 <HAL_GPIO_WritePin>

	if((Verify_CAN & 2) == 2)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <Verify_Data+0xa4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <Verify_Data+0x86>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2104      	movs	r1, #4
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <Verify_Data+0xa0>)
 8000d08:	f004 f9fe 	bl	8005108 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 8000d0c:	e004      	b.n	8000d18 <Verify_Data+0x90>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2104      	movs	r1, #4
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <Verify_Data+0xa0>)
 8000d14:	f004 f9f8 	bl	8005108 <HAL_GPIO_WritePin>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000286 	.word	0x20000286
 8000d24:	20000288 	.word	0x20000288
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	20000284 	.word	0x20000284

08000d30 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d3e:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID;
 8000d4a:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000d4c:	f240 521d 	movw	r2, #1309	; 0x51d
 8000d50:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000d54:	2208      	movs	r2, #8
 8000d56:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d64:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d6e:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d72:	885b      	ldrh	r3, [r3, #2]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d7c:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d86:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d94:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000d98:	889b      	ldrh	r3, [r3, #4]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000d9e:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000da2:	88db      	ldrh	r3, [r3, #6]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000dac:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <Tx_Analog_1_4+0xec>)
 8000db0:	88db      	ldrh	r3, [r3, #6]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000db6:	71da      	strb	r2, [r3, #7]

	if((HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) && (hcan->ErrorCode == 0))
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <Tx_Analog_1_4+0xf4>)
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <Tx_Analog_1_4+0xf0>)
 8000dbc:	4916      	ldr	r1, [pc, #88]	; (8000e18 <Tx_Analog_1_4+0xe8>)
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f002 ff14 	bl	8003bec <HAL_CAN_AddTxMessage>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10b      	bne.n	8000de2 <Tx_Analog_1_4+0xb2>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <Tx_Analog_1_4+0xb2>
		Verify_CAN |= 1;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <Tx_Analog_1_4+0xf8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <Tx_Analog_1_4+0xf8>)
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e006      	b.n	8000df0 <Tx_Analog_1_4+0xc0>
	else
		Verify_CAN &= 2;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <Tx_Analog_1_4+0xf8>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <Tx_Analog_1_4+0xf8>)
 8000dee:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e002      	b.n	8000dfc <Tx_Analog_1_4+0xcc>
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f002 ffd0 	bl	8003da2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d002      	beq.n	8000e0e <Tx_Analog_1_4+0xde>
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d9f3      	bls.n	8000df6 <Tx_Analog_1_4+0xc6>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000258 	.word	0x20000258
 8000e1c:	20000288 	.word	0x20000288
 8000e20:	20000278 	.word	0x20000278
 8000e24:	20000280 	.word	0x20000280
 8000e28:	20000284 	.word	0x20000284

08000e2c <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 1;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000e48:	f240 521e 	movw	r2, #1310	; 0x51e
 8000e4c:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000e50:	2208      	movs	r2, #8
 8000e52:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e56:	891b      	ldrh	r3, [r3, #8]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e60:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e64:	891b      	ldrh	r3, [r3, #8]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e6a:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e6e:	895b      	ldrh	r3, [r3, #10]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e78:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e7c:	895b      	ldrh	r3, [r3, #10]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e82:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e86:	899b      	ldrh	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e90:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e94:	899b      	ldrh	r3, [r3, #12]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000e9a:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000e9e:	89db      	ldrh	r3, [r3, #14]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000ea8:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <Tx_Analog_5_8+0xec>)
 8000eac:	89db      	ldrh	r3, [r3, #14]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000eb2:	71da      	strb	r2, [r3, #7]

	if((HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) && (hcan->ErrorCode == 0))
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <Tx_Analog_5_8+0xf4>)
 8000eb6:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <Tx_Analog_5_8+0xf0>)
 8000eb8:	4916      	ldr	r1, [pc, #88]	; (8000f14 <Tx_Analog_5_8+0xe8>)
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f002 fe96 	bl	8003bec <HAL_CAN_AddTxMessage>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10b      	bne.n	8000ede <Tx_Analog_5_8+0xb2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <Tx_Analog_5_8+0xb2>
		Verify_CAN |= 1;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <Tx_Analog_5_8+0xf8>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <Tx_Analog_5_8+0xf8>)
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e006      	b.n	8000eec <Tx_Analog_5_8+0xc0>
	else
		Verify_CAN &= 2;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <Tx_Analog_5_8+0xf8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <Tx_Analog_5_8+0xf8>)
 8000eea:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e002      	b.n	8000ef8 <Tx_Analog_5_8+0xcc>
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f002 ff52 	bl	8003da2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d002      	beq.n	8000f0a <Tx_Analog_5_8+0xde>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d9f3      	bls.n	8000ef2 <Tx_Analog_5_8+0xc6>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000258 	.word	0x20000258
 8000f18:	20000288 	.word	0x20000288
 8000f1c:	20000278 	.word	0x20000278
 8000f20:	20000280 	.word	0x20000280
 8000f24:	20000284 	.word	0x20000284

08000f28 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000f30:	4b37      	ldr	r3, [pc, #220]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 2;
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000f44:	f240 521f 	movw	r2, #1311	; 0x51f
 8000f48:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 8000f50:	4b30      	ldr	r3, [pc, #192]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f52:	8a1b      	ldrh	r3, [r3, #16]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f60:	8a1b      	ldrh	r3, [r3, #16]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f66:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f6a:	8a5b      	ldrh	r3, [r3, #18]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f74:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f78:	8a5b      	ldrh	r3, [r3, #18]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f7e:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f82:	8a9b      	ldrh	r3, [r3, #20]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f8c:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f90:	8a9b      	ldrh	r3, [r3, #20]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000f96:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000f9a:	8adb      	ldrh	r3, [r3, #22]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000fa4:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <Tx_Analog_9_12+0xec>)
 8000fa8:	8adb      	ldrh	r3, [r3, #22]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000fae:	71da      	strb	r2, [r3, #7]

	if((HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) && (hcan->ErrorCode == 0))
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <Tx_Analog_9_12+0xf4>)
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <Tx_Analog_9_12+0xf0>)
 8000fb4:	4916      	ldr	r1, [pc, #88]	; (8001010 <Tx_Analog_9_12+0xe8>)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f002 fe18 	bl	8003bec <HAL_CAN_AddTxMessage>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10b      	bne.n	8000fda <Tx_Analog_9_12+0xb2>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d107      	bne.n	8000fda <Tx_Analog_9_12+0xb2>
		Verify_CAN |= 1;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <Tx_Analog_9_12+0xf8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <Tx_Analog_9_12+0xf8>)
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e006      	b.n	8000fe8 <Tx_Analog_9_12+0xc0>
	else
		Verify_CAN &= 2;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <Tx_Analog_9_12+0xf8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <Tx_Analog_9_12+0xf8>)
 8000fe6:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e002      	b.n	8000ff4 <Tx_Analog_9_12+0xcc>
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f002 fed4 	bl	8003da2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d002      	beq.n	8001006 <Tx_Analog_9_12+0xde>
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d9f3      	bls.n	8000fee <Tx_Analog_9_12+0xc6>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000258 	.word	0x20000258
 8001014:	20000288 	.word	0x20000288
 8001018:	20000278 	.word	0x20000278
 800101c:	20000280 	.word	0x20000280
 8001020:	20000284 	.word	0x20000284

08001024 <Tx_Analog_13_16>:

static void Tx_Analog_13_16(CAN_HandleTypeDef* hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <Tx_Analog_13_16+0xe8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <Tx_Analog_13_16+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <Tx_Analog_13_16+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 3;
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <Tx_Analog_13_16+0xe8>)
 8001040:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001044:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <Tx_Analog_13_16+0xe8>)
 8001048:	2208      	movs	r2, #8
 800104a:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[12] >> 8;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <Tx_Analog_13_16+0xec>)
 800104e:	8b1b      	ldrh	r3, [r3, #24]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <Tx_Analog_13_16+0xf0>)
 8001058:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[12] & 0xff;
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <Tx_Analog_13_16+0xec>)
 800105c:	8b1b      	ldrh	r3, [r3, #24]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <Tx_Analog_13_16+0xf0>)
 8001062:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[13] >> 8;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <Tx_Analog_13_16+0xec>)
 8001066:	8b5b      	ldrh	r3, [r3, #26]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Tx_Analog_13_16+0xf0>)
 8001070:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[13] & 0xff;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <Tx_Analog_13_16+0xec>)
 8001074:	8b5b      	ldrh	r3, [r3, #26]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <Tx_Analog_13_16+0xf0>)
 800107a:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[14] >> 8;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <Tx_Analog_13_16+0xec>)
 800107e:	8b9b      	ldrh	r3, [r3, #28]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <Tx_Analog_13_16+0xf0>)
 8001088:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[14] & 0xff;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <Tx_Analog_13_16+0xec>)
 800108c:	8b9b      	ldrh	r3, [r3, #28]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <Tx_Analog_13_16+0xf0>)
 8001092:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[15] >> 8;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <Tx_Analog_13_16+0xec>)
 8001096:	8bdb      	ldrh	r3, [r3, #30]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <Tx_Analog_13_16+0xf0>)
 80010a0:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[15] & 0xff;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <Tx_Analog_13_16+0xec>)
 80010a4:	8bdb      	ldrh	r3, [r3, #30]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <Tx_Analog_13_16+0xf0>)
 80010aa:	71da      	strb	r2, [r3, #7]

	if((HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) && (hcan->ErrorCode == 0))
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <Tx_Analog_13_16+0xf4>)
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <Tx_Analog_13_16+0xf0>)
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <Tx_Analog_13_16+0xe8>)
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f002 fd9a 	bl	8003bec <HAL_CAN_AddTxMessage>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10b      	bne.n	80010d6 <Tx_Analog_13_16+0xb2>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d107      	bne.n	80010d6 <Tx_Analog_13_16+0xb2>
		Verify_CAN |= 1;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <Tx_Analog_13_16+0xf8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <Tx_Analog_13_16+0xf8>)
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e006      	b.n	80010e4 <Tx_Analog_13_16+0xc0>
	else
		Verify_CAN &= 2;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <Tx_Analog_13_16+0xf8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <Tx_Analog_13_16+0xf8>)
 80010e2:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e002      	b.n	80010f0 <Tx_Analog_13_16+0xcc>
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f002 fe56 	bl	8003da2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d002      	beq.n	8001102 <Tx_Analog_13_16+0xde>
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d9f3      	bls.n	80010ea <Tx_Analog_13_16+0xc6>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000258 	.word	0x20000258
 8001110:	20000288 	.word	0x20000288
 8001114:	20000278 	.word	0x20000278
 8001118:	20000280 	.word	0x20000280
 800111c:	20000284 	.word	0x20000284

08001120 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001128:	4bc4      	ldr	r3, [pc, #784]	; (800143c <Tx_Verify+0x31c>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800112e:	4bc3      	ldr	r3, [pc, #780]	; (800143c <Tx_Verify+0x31c>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001134:	4bc1      	ldr	r3, [pc, #772]	; (800143c <Tx_Verify+0x31c>)
 8001136:	2200      	movs	r2, #0
 8001138:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 4;
 800113a:	4bc0      	ldr	r3, [pc, #768]	; (800143c <Tx_Verify+0x31c>)
 800113c:	f240 5221 	movw	r2, #1313	; 0x521
 8001140:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 7;
 8001142:	4bbe      	ldr	r3, [pc, #760]	; (800143c <Tx_Verify+0x31c>)
 8001144:	2207      	movs	r2, #7
 8001146:	611a      	str	r2, [r3, #16]

	Verify_Data();
 8001148:	f7ff fd9e 	bl	8000c88 <Verify_Data>

	TxData[0] = Verify >> 8;
 800114c:	4bbc      	ldr	r3, [pc, #752]	; (8001440 <Tx_Verify+0x320>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b29b      	uxth	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4bbb      	ldr	r3, [pc, #748]	; (8001444 <Tx_Verify+0x324>)
 8001158:	701a      	strb	r2, [r3, #0]
	TxData[1] = Verify & 0xff;
 800115a:	4bb9      	ldr	r3, [pc, #740]	; (8001440 <Tx_Verify+0x320>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4bb8      	ldr	r3, [pc, #736]	; (8001444 <Tx_Verify+0x324>)
 8001162:	705a      	strb	r2, [r3, #1]

	__SAVE_FREQ(TxData[2], Per_Msg[Analog_1_4]);
 8001164:	4bb8      	ldr	r3, [pc, #736]	; (8001448 <Tx_Verify+0x328>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800116c:	f000 8081 	beq.w	8001272 <Tx_Verify+0x152>
 8001170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001174:	f200 80a9 	bhi.w	80012ca <Tx_Verify+0x1aa>
 8001178:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800117c:	d07d      	beq.n	800127a <Tx_Verify+0x15a>
 800117e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001182:	f200 80a2 	bhi.w	80012ca <Tx_Verify+0x1aa>
 8001186:	2bc8      	cmp	r3, #200	; 0xc8
 8001188:	d07b      	beq.n	8001282 <Tx_Verify+0x162>
 800118a:	2bc8      	cmp	r3, #200	; 0xc8
 800118c:	f200 809d 	bhi.w	80012ca <Tx_Verify+0x1aa>
 8001190:	2b32      	cmp	r3, #50	; 0x32
 8001192:	d86b      	bhi.n	800126c <Tx_Verify+0x14c>
 8001194:	2b02      	cmp	r3, #2
 8001196:	f0c0 8098 	bcc.w	80012ca <Tx_Verify+0x1aa>
 800119a:	3b02      	subs	r3, #2
 800119c:	2b30      	cmp	r3, #48	; 0x30
 800119e:	f200 8094 	bhi.w	80012ca <Tx_Verify+0x1aa>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <Tx_Verify+0x88>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080012c3 	.word	0x080012c3
 80011ac:	080012cb 	.word	0x080012cb
 80011b0:	080012bb 	.word	0x080012bb
 80011b4:	080012b3 	.word	0x080012b3
 80011b8:	080012cb 	.word	0x080012cb
 80011bc:	080012cb 	.word	0x080012cb
 80011c0:	080012cb 	.word	0x080012cb
 80011c4:	080012cb 	.word	0x080012cb
 80011c8:	080012ab 	.word	0x080012ab
 80011cc:	080012cb 	.word	0x080012cb
 80011d0:	080012cb 	.word	0x080012cb
 80011d4:	080012cb 	.word	0x080012cb
 80011d8:	080012cb 	.word	0x080012cb
 80011dc:	080012cb 	.word	0x080012cb
 80011e0:	080012cb 	.word	0x080012cb
 80011e4:	080012cb 	.word	0x080012cb
 80011e8:	080012cb 	.word	0x080012cb
 80011ec:	080012cb 	.word	0x080012cb
 80011f0:	080012a3 	.word	0x080012a3
 80011f4:	080012cb 	.word	0x080012cb
 80011f8:	080012cb 	.word	0x080012cb
 80011fc:	080012cb 	.word	0x080012cb
 8001200:	080012cb 	.word	0x080012cb
 8001204:	080012cb 	.word	0x080012cb
 8001208:	080012cb 	.word	0x080012cb
 800120c:	080012cb 	.word	0x080012cb
 8001210:	080012cb 	.word	0x080012cb
 8001214:	080012cb 	.word	0x080012cb
 8001218:	080012cb 	.word	0x080012cb
 800121c:	080012cb 	.word	0x080012cb
 8001220:	080012cb 	.word	0x080012cb
 8001224:	080012cb 	.word	0x080012cb
 8001228:	080012cb 	.word	0x080012cb
 800122c:	080012cb 	.word	0x080012cb
 8001230:	080012cb 	.word	0x080012cb
 8001234:	080012cb 	.word	0x080012cb
 8001238:	080012cb 	.word	0x080012cb
 800123c:	080012cb 	.word	0x080012cb
 8001240:	0800129b 	.word	0x0800129b
 8001244:	080012cb 	.word	0x080012cb
 8001248:	080012cb 	.word	0x080012cb
 800124c:	080012cb 	.word	0x080012cb
 8001250:	080012cb 	.word	0x080012cb
 8001254:	080012cb 	.word	0x080012cb
 8001258:	080012cb 	.word	0x080012cb
 800125c:	080012cb 	.word	0x080012cb
 8001260:	080012cb 	.word	0x080012cb
 8001264:	080012cb 	.word	0x080012cb
 8001268:	08001293 	.word	0x08001293
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d00c      	beq.n	800128a <Tx_Verify+0x16a>
 8001270:	e02b      	b.n	80012ca <Tx_Verify+0x1aa>
 8001272:	4b74      	ldr	r3, [pc, #464]	; (8001444 <Tx_Verify+0x324>)
 8001274:	2201      	movs	r2, #1
 8001276:	709a      	strb	r2, [r3, #2]
 8001278:	e02a      	b.n	80012d0 <Tx_Verify+0x1b0>
 800127a:	4b72      	ldr	r3, [pc, #456]	; (8001444 <Tx_Verify+0x324>)
 800127c:	2202      	movs	r2, #2
 800127e:	709a      	strb	r2, [r3, #2]
 8001280:	e026      	b.n	80012d0 <Tx_Verify+0x1b0>
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <Tx_Verify+0x324>)
 8001284:	2203      	movs	r2, #3
 8001286:	709a      	strb	r2, [r3, #2]
 8001288:	e022      	b.n	80012d0 <Tx_Verify+0x1b0>
 800128a:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <Tx_Verify+0x324>)
 800128c:	2204      	movs	r2, #4
 800128e:	709a      	strb	r2, [r3, #2]
 8001290:	e01e      	b.n	80012d0 <Tx_Verify+0x1b0>
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <Tx_Verify+0x324>)
 8001294:	2205      	movs	r2, #5
 8001296:	709a      	strb	r2, [r3, #2]
 8001298:	e01a      	b.n	80012d0 <Tx_Verify+0x1b0>
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <Tx_Verify+0x324>)
 800129c:	2206      	movs	r2, #6
 800129e:	709a      	strb	r2, [r3, #2]
 80012a0:	e016      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <Tx_Verify+0x324>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	709a      	strb	r2, [r3, #2]
 80012a8:	e012      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <Tx_Verify+0x324>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	709a      	strb	r2, [r3, #2]
 80012b0:	e00e      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <Tx_Verify+0x324>)
 80012b4:	2209      	movs	r2, #9
 80012b6:	709a      	strb	r2, [r3, #2]
 80012b8:	e00a      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <Tx_Verify+0x324>)
 80012bc:	220a      	movs	r2, #10
 80012be:	709a      	strb	r2, [r3, #2]
 80012c0:	e006      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <Tx_Verify+0x324>)
 80012c4:	220b      	movs	r2, #11
 80012c6:	709a      	strb	r2, [r3, #2]
 80012c8:	e002      	b.n	80012d0 <Tx_Verify+0x1b0>
 80012ca:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <Tx_Verify+0x324>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	709a      	strb	r2, [r3, #2]
 80012d0:	bf00      	nop
	__SAVE_FREQ(TxData[3], Per_Msg[Analog_5_8]);
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <Tx_Verify+0x328>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012da:	f000 8082 	beq.w	80013e2 <Tx_Verify+0x2c2>
 80012de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e2:	f200 80b3 	bhi.w	800144c <Tx_Verify+0x32c>
 80012e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ea:	d07e      	beq.n	80013ea <Tx_Verify+0x2ca>
 80012ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f0:	f200 80ac 	bhi.w	800144c <Tx_Verify+0x32c>
 80012f4:	2bc8      	cmp	r3, #200	; 0xc8
 80012f6:	d07c      	beq.n	80013f2 <Tx_Verify+0x2d2>
 80012f8:	2bc8      	cmp	r3, #200	; 0xc8
 80012fa:	f200 80a7 	bhi.w	800144c <Tx_Verify+0x32c>
 80012fe:	2b32      	cmp	r3, #50	; 0x32
 8001300:	d86c      	bhi.n	80013dc <Tx_Verify+0x2bc>
 8001302:	2b02      	cmp	r3, #2
 8001304:	f0c0 80a2 	bcc.w	800144c <Tx_Verify+0x32c>
 8001308:	3b02      	subs	r3, #2
 800130a:	2b30      	cmp	r3, #48	; 0x30
 800130c:	f200 809e 	bhi.w	800144c <Tx_Verify+0x32c>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <Tx_Verify+0x1f8>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001433 	.word	0x08001433
 800131c:	0800144d 	.word	0x0800144d
 8001320:	0800142b 	.word	0x0800142b
 8001324:	08001423 	.word	0x08001423
 8001328:	0800144d 	.word	0x0800144d
 800132c:	0800144d 	.word	0x0800144d
 8001330:	0800144d 	.word	0x0800144d
 8001334:	0800144d 	.word	0x0800144d
 8001338:	0800141b 	.word	0x0800141b
 800133c:	0800144d 	.word	0x0800144d
 8001340:	0800144d 	.word	0x0800144d
 8001344:	0800144d 	.word	0x0800144d
 8001348:	0800144d 	.word	0x0800144d
 800134c:	0800144d 	.word	0x0800144d
 8001350:	0800144d 	.word	0x0800144d
 8001354:	0800144d 	.word	0x0800144d
 8001358:	0800144d 	.word	0x0800144d
 800135c:	0800144d 	.word	0x0800144d
 8001360:	08001413 	.word	0x08001413
 8001364:	0800144d 	.word	0x0800144d
 8001368:	0800144d 	.word	0x0800144d
 800136c:	0800144d 	.word	0x0800144d
 8001370:	0800144d 	.word	0x0800144d
 8001374:	0800144d 	.word	0x0800144d
 8001378:	0800144d 	.word	0x0800144d
 800137c:	0800144d 	.word	0x0800144d
 8001380:	0800144d 	.word	0x0800144d
 8001384:	0800144d 	.word	0x0800144d
 8001388:	0800144d 	.word	0x0800144d
 800138c:	0800144d 	.word	0x0800144d
 8001390:	0800144d 	.word	0x0800144d
 8001394:	0800144d 	.word	0x0800144d
 8001398:	0800144d 	.word	0x0800144d
 800139c:	0800144d 	.word	0x0800144d
 80013a0:	0800144d 	.word	0x0800144d
 80013a4:	0800144d 	.word	0x0800144d
 80013a8:	0800144d 	.word	0x0800144d
 80013ac:	0800144d 	.word	0x0800144d
 80013b0:	0800140b 	.word	0x0800140b
 80013b4:	0800144d 	.word	0x0800144d
 80013b8:	0800144d 	.word	0x0800144d
 80013bc:	0800144d 	.word	0x0800144d
 80013c0:	0800144d 	.word	0x0800144d
 80013c4:	0800144d 	.word	0x0800144d
 80013c8:	0800144d 	.word	0x0800144d
 80013cc:	0800144d 	.word	0x0800144d
 80013d0:	0800144d 	.word	0x0800144d
 80013d4:	0800144d 	.word	0x0800144d
 80013d8:	08001403 	.word	0x08001403
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d00c      	beq.n	80013fa <Tx_Verify+0x2da>
 80013e0:	e034      	b.n	800144c <Tx_Verify+0x32c>
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <Tx_Verify+0x324>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	70da      	strb	r2, [r3, #3]
 80013e8:	e033      	b.n	8001452 <Tx_Verify+0x332>
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <Tx_Verify+0x324>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	70da      	strb	r2, [r3, #3]
 80013f0:	e02f      	b.n	8001452 <Tx_Verify+0x332>
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <Tx_Verify+0x324>)
 80013f4:	2203      	movs	r2, #3
 80013f6:	70da      	strb	r2, [r3, #3]
 80013f8:	e02b      	b.n	8001452 <Tx_Verify+0x332>
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <Tx_Verify+0x324>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	70da      	strb	r2, [r3, #3]
 8001400:	e027      	b.n	8001452 <Tx_Verify+0x332>
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <Tx_Verify+0x324>)
 8001404:	2205      	movs	r2, #5
 8001406:	70da      	strb	r2, [r3, #3]
 8001408:	e023      	b.n	8001452 <Tx_Verify+0x332>
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <Tx_Verify+0x324>)
 800140c:	2206      	movs	r2, #6
 800140e:	70da      	strb	r2, [r3, #3]
 8001410:	e01f      	b.n	8001452 <Tx_Verify+0x332>
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <Tx_Verify+0x324>)
 8001414:	2207      	movs	r2, #7
 8001416:	70da      	strb	r2, [r3, #3]
 8001418:	e01b      	b.n	8001452 <Tx_Verify+0x332>
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <Tx_Verify+0x324>)
 800141c:	2208      	movs	r2, #8
 800141e:	70da      	strb	r2, [r3, #3]
 8001420:	e017      	b.n	8001452 <Tx_Verify+0x332>
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <Tx_Verify+0x324>)
 8001424:	2209      	movs	r2, #9
 8001426:	70da      	strb	r2, [r3, #3]
 8001428:	e013      	b.n	8001452 <Tx_Verify+0x332>
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <Tx_Verify+0x324>)
 800142c:	220a      	movs	r2, #10
 800142e:	70da      	strb	r2, [r3, #3]
 8001430:	e00f      	b.n	8001452 <Tx_Verify+0x332>
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <Tx_Verify+0x324>)
 8001434:	220b      	movs	r2, #11
 8001436:	70da      	strb	r2, [r3, #3]
 8001438:	e00b      	b.n	8001452 <Tx_Verify+0x332>
 800143a:	bf00      	nop
 800143c:	20000258 	.word	0x20000258
 8001440:	20000286 	.word	0x20000286
 8001444:	20000278 	.word	0x20000278
 8001448:	200002bc 	.word	0x200002bc
 800144c:	4bb7      	ldr	r3, [pc, #732]	; (800172c <Tx_Verify+0x60c>)
 800144e:	2200      	movs	r2, #0
 8001450:	70da      	strb	r2, [r3, #3]
 8001452:	bf00      	nop
	__SAVE_FREQ(TxData[4], Per_Msg[Analog_9_12]);
 8001454:	4bb6      	ldr	r3, [pc, #728]	; (8001730 <Tx_Verify+0x610>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145c:	f000 8081 	beq.w	8001562 <Tx_Verify+0x442>
 8001460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001464:	f200 80a9 	bhi.w	80015ba <Tx_Verify+0x49a>
 8001468:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800146c:	d07d      	beq.n	800156a <Tx_Verify+0x44a>
 800146e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001472:	f200 80a2 	bhi.w	80015ba <Tx_Verify+0x49a>
 8001476:	2bc8      	cmp	r3, #200	; 0xc8
 8001478:	d07b      	beq.n	8001572 <Tx_Verify+0x452>
 800147a:	2bc8      	cmp	r3, #200	; 0xc8
 800147c:	f200 809d 	bhi.w	80015ba <Tx_Verify+0x49a>
 8001480:	2b32      	cmp	r3, #50	; 0x32
 8001482:	d86b      	bhi.n	800155c <Tx_Verify+0x43c>
 8001484:	2b02      	cmp	r3, #2
 8001486:	f0c0 8098 	bcc.w	80015ba <Tx_Verify+0x49a>
 800148a:	3b02      	subs	r3, #2
 800148c:	2b30      	cmp	r3, #48	; 0x30
 800148e:	f200 8094 	bhi.w	80015ba <Tx_Verify+0x49a>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <Tx_Verify+0x378>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080015b3 	.word	0x080015b3
 800149c:	080015bb 	.word	0x080015bb
 80014a0:	080015ab 	.word	0x080015ab
 80014a4:	080015a3 	.word	0x080015a3
 80014a8:	080015bb 	.word	0x080015bb
 80014ac:	080015bb 	.word	0x080015bb
 80014b0:	080015bb 	.word	0x080015bb
 80014b4:	080015bb 	.word	0x080015bb
 80014b8:	0800159b 	.word	0x0800159b
 80014bc:	080015bb 	.word	0x080015bb
 80014c0:	080015bb 	.word	0x080015bb
 80014c4:	080015bb 	.word	0x080015bb
 80014c8:	080015bb 	.word	0x080015bb
 80014cc:	080015bb 	.word	0x080015bb
 80014d0:	080015bb 	.word	0x080015bb
 80014d4:	080015bb 	.word	0x080015bb
 80014d8:	080015bb 	.word	0x080015bb
 80014dc:	080015bb 	.word	0x080015bb
 80014e0:	08001593 	.word	0x08001593
 80014e4:	080015bb 	.word	0x080015bb
 80014e8:	080015bb 	.word	0x080015bb
 80014ec:	080015bb 	.word	0x080015bb
 80014f0:	080015bb 	.word	0x080015bb
 80014f4:	080015bb 	.word	0x080015bb
 80014f8:	080015bb 	.word	0x080015bb
 80014fc:	080015bb 	.word	0x080015bb
 8001500:	080015bb 	.word	0x080015bb
 8001504:	080015bb 	.word	0x080015bb
 8001508:	080015bb 	.word	0x080015bb
 800150c:	080015bb 	.word	0x080015bb
 8001510:	080015bb 	.word	0x080015bb
 8001514:	080015bb 	.word	0x080015bb
 8001518:	080015bb 	.word	0x080015bb
 800151c:	080015bb 	.word	0x080015bb
 8001520:	080015bb 	.word	0x080015bb
 8001524:	080015bb 	.word	0x080015bb
 8001528:	080015bb 	.word	0x080015bb
 800152c:	080015bb 	.word	0x080015bb
 8001530:	0800158b 	.word	0x0800158b
 8001534:	080015bb 	.word	0x080015bb
 8001538:	080015bb 	.word	0x080015bb
 800153c:	080015bb 	.word	0x080015bb
 8001540:	080015bb 	.word	0x080015bb
 8001544:	080015bb 	.word	0x080015bb
 8001548:	080015bb 	.word	0x080015bb
 800154c:	080015bb 	.word	0x080015bb
 8001550:	080015bb 	.word	0x080015bb
 8001554:	080015bb 	.word	0x080015bb
 8001558:	08001583 	.word	0x08001583
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d00c      	beq.n	800157a <Tx_Verify+0x45a>
 8001560:	e02b      	b.n	80015ba <Tx_Verify+0x49a>
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <Tx_Verify+0x60c>)
 8001564:	2201      	movs	r2, #1
 8001566:	711a      	strb	r2, [r3, #4]
 8001568:	e02a      	b.n	80015c0 <Tx_Verify+0x4a0>
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <Tx_Verify+0x60c>)
 800156c:	2202      	movs	r2, #2
 800156e:	711a      	strb	r2, [r3, #4]
 8001570:	e026      	b.n	80015c0 <Tx_Verify+0x4a0>
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <Tx_Verify+0x60c>)
 8001574:	2203      	movs	r2, #3
 8001576:	711a      	strb	r2, [r3, #4]
 8001578:	e022      	b.n	80015c0 <Tx_Verify+0x4a0>
 800157a:	4b6c      	ldr	r3, [pc, #432]	; (800172c <Tx_Verify+0x60c>)
 800157c:	2204      	movs	r2, #4
 800157e:	711a      	strb	r2, [r3, #4]
 8001580:	e01e      	b.n	80015c0 <Tx_Verify+0x4a0>
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <Tx_Verify+0x60c>)
 8001584:	2205      	movs	r2, #5
 8001586:	711a      	strb	r2, [r3, #4]
 8001588:	e01a      	b.n	80015c0 <Tx_Verify+0x4a0>
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <Tx_Verify+0x60c>)
 800158c:	2206      	movs	r2, #6
 800158e:	711a      	strb	r2, [r3, #4]
 8001590:	e016      	b.n	80015c0 <Tx_Verify+0x4a0>
 8001592:	4b66      	ldr	r3, [pc, #408]	; (800172c <Tx_Verify+0x60c>)
 8001594:	2207      	movs	r2, #7
 8001596:	711a      	strb	r2, [r3, #4]
 8001598:	e012      	b.n	80015c0 <Tx_Verify+0x4a0>
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <Tx_Verify+0x60c>)
 800159c:	2208      	movs	r2, #8
 800159e:	711a      	strb	r2, [r3, #4]
 80015a0:	e00e      	b.n	80015c0 <Tx_Verify+0x4a0>
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <Tx_Verify+0x60c>)
 80015a4:	2209      	movs	r2, #9
 80015a6:	711a      	strb	r2, [r3, #4]
 80015a8:	e00a      	b.n	80015c0 <Tx_Verify+0x4a0>
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <Tx_Verify+0x60c>)
 80015ac:	220a      	movs	r2, #10
 80015ae:	711a      	strb	r2, [r3, #4]
 80015b0:	e006      	b.n	80015c0 <Tx_Verify+0x4a0>
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <Tx_Verify+0x60c>)
 80015b4:	220b      	movs	r2, #11
 80015b6:	711a      	strb	r2, [r3, #4]
 80015b8:	e002      	b.n	80015c0 <Tx_Verify+0x4a0>
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <Tx_Verify+0x60c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	711a      	strb	r2, [r3, #4]
 80015c0:	bf00      	nop
	__SAVE_FREQ(TxData[5], Per_Msg[Analog_13_16]);
 80015c2:	4b5b      	ldr	r3, [pc, #364]	; (8001730 <Tx_Verify+0x610>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ca:	f000 8082 	beq.w	80016d2 <Tx_Verify+0x5b2>
 80015ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d2:	f200 80af 	bhi.w	8001734 <Tx_Verify+0x614>
 80015d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015da:	d07e      	beq.n	80016da <Tx_Verify+0x5ba>
 80015dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e0:	f200 80a8 	bhi.w	8001734 <Tx_Verify+0x614>
 80015e4:	2bc8      	cmp	r3, #200	; 0xc8
 80015e6:	d07c      	beq.n	80016e2 <Tx_Verify+0x5c2>
 80015e8:	2bc8      	cmp	r3, #200	; 0xc8
 80015ea:	f200 80a3 	bhi.w	8001734 <Tx_Verify+0x614>
 80015ee:	2b32      	cmp	r3, #50	; 0x32
 80015f0:	d86c      	bhi.n	80016cc <Tx_Verify+0x5ac>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	f0c0 809e 	bcc.w	8001734 <Tx_Verify+0x614>
 80015f8:	3b02      	subs	r3, #2
 80015fa:	2b30      	cmp	r3, #48	; 0x30
 80015fc:	f200 809a 	bhi.w	8001734 <Tx_Verify+0x614>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <Tx_Verify+0x4e8>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	08001723 	.word	0x08001723
 800160c:	08001735 	.word	0x08001735
 8001610:	0800171b 	.word	0x0800171b
 8001614:	08001713 	.word	0x08001713
 8001618:	08001735 	.word	0x08001735
 800161c:	08001735 	.word	0x08001735
 8001620:	08001735 	.word	0x08001735
 8001624:	08001735 	.word	0x08001735
 8001628:	0800170b 	.word	0x0800170b
 800162c:	08001735 	.word	0x08001735
 8001630:	08001735 	.word	0x08001735
 8001634:	08001735 	.word	0x08001735
 8001638:	08001735 	.word	0x08001735
 800163c:	08001735 	.word	0x08001735
 8001640:	08001735 	.word	0x08001735
 8001644:	08001735 	.word	0x08001735
 8001648:	08001735 	.word	0x08001735
 800164c:	08001735 	.word	0x08001735
 8001650:	08001703 	.word	0x08001703
 8001654:	08001735 	.word	0x08001735
 8001658:	08001735 	.word	0x08001735
 800165c:	08001735 	.word	0x08001735
 8001660:	08001735 	.word	0x08001735
 8001664:	08001735 	.word	0x08001735
 8001668:	08001735 	.word	0x08001735
 800166c:	08001735 	.word	0x08001735
 8001670:	08001735 	.word	0x08001735
 8001674:	08001735 	.word	0x08001735
 8001678:	08001735 	.word	0x08001735
 800167c:	08001735 	.word	0x08001735
 8001680:	08001735 	.word	0x08001735
 8001684:	08001735 	.word	0x08001735
 8001688:	08001735 	.word	0x08001735
 800168c:	08001735 	.word	0x08001735
 8001690:	08001735 	.word	0x08001735
 8001694:	08001735 	.word	0x08001735
 8001698:	08001735 	.word	0x08001735
 800169c:	08001735 	.word	0x08001735
 80016a0:	080016fb 	.word	0x080016fb
 80016a4:	08001735 	.word	0x08001735
 80016a8:	08001735 	.word	0x08001735
 80016ac:	08001735 	.word	0x08001735
 80016b0:	08001735 	.word	0x08001735
 80016b4:	08001735 	.word	0x08001735
 80016b8:	08001735 	.word	0x08001735
 80016bc:	08001735 	.word	0x08001735
 80016c0:	08001735 	.word	0x08001735
 80016c4:	08001735 	.word	0x08001735
 80016c8:	080016f3 	.word	0x080016f3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d00c      	beq.n	80016ea <Tx_Verify+0x5ca>
 80016d0:	e030      	b.n	8001734 <Tx_Verify+0x614>
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <Tx_Verify+0x60c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	715a      	strb	r2, [r3, #5]
 80016d8:	e02f      	b.n	800173a <Tx_Verify+0x61a>
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <Tx_Verify+0x60c>)
 80016dc:	2202      	movs	r2, #2
 80016de:	715a      	strb	r2, [r3, #5]
 80016e0:	e02b      	b.n	800173a <Tx_Verify+0x61a>
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <Tx_Verify+0x60c>)
 80016e4:	2203      	movs	r2, #3
 80016e6:	715a      	strb	r2, [r3, #5]
 80016e8:	e027      	b.n	800173a <Tx_Verify+0x61a>
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <Tx_Verify+0x60c>)
 80016ec:	2204      	movs	r2, #4
 80016ee:	715a      	strb	r2, [r3, #5]
 80016f0:	e023      	b.n	800173a <Tx_Verify+0x61a>
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <Tx_Verify+0x60c>)
 80016f4:	2205      	movs	r2, #5
 80016f6:	715a      	strb	r2, [r3, #5]
 80016f8:	e01f      	b.n	800173a <Tx_Verify+0x61a>
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <Tx_Verify+0x60c>)
 80016fc:	2206      	movs	r2, #6
 80016fe:	715a      	strb	r2, [r3, #5]
 8001700:	e01b      	b.n	800173a <Tx_Verify+0x61a>
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <Tx_Verify+0x60c>)
 8001704:	2207      	movs	r2, #7
 8001706:	715a      	strb	r2, [r3, #5]
 8001708:	e017      	b.n	800173a <Tx_Verify+0x61a>
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <Tx_Verify+0x60c>)
 800170c:	2208      	movs	r2, #8
 800170e:	715a      	strb	r2, [r3, #5]
 8001710:	e013      	b.n	800173a <Tx_Verify+0x61a>
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <Tx_Verify+0x60c>)
 8001714:	2209      	movs	r2, #9
 8001716:	715a      	strb	r2, [r3, #5]
 8001718:	e00f      	b.n	800173a <Tx_Verify+0x61a>
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <Tx_Verify+0x60c>)
 800171c:	220a      	movs	r2, #10
 800171e:	715a      	strb	r2, [r3, #5]
 8001720:	e00b      	b.n	800173a <Tx_Verify+0x61a>
 8001722:	4b02      	ldr	r3, [pc, #8]	; (800172c <Tx_Verify+0x60c>)
 8001724:	220b      	movs	r2, #11
 8001726:	715a      	strb	r2, [r3, #5]
 8001728:	e007      	b.n	800173a <Tx_Verify+0x61a>
 800172a:	bf00      	nop
 800172c:	20000278 	.word	0x20000278
 8001730:	200002bc 	.word	0x200002bc
 8001734:	4b74      	ldr	r3, [pc, #464]	; (8001908 <Tx_Verify+0x7e8>)
 8001736:	2200      	movs	r2, #0
 8001738:	715a      	strb	r2, [r3, #5]
 800173a:	bf00      	nop
	__SAVE_FREQ(TxData[6], Per_Msg[Verify_Msg]);
 800173c:	4b73      	ldr	r3, [pc, #460]	; (800190c <Tx_Verify+0x7ec>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001744:	f000 8081 	beq.w	800184a <Tx_Verify+0x72a>
 8001748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800174c:	f200 80a9 	bhi.w	80018a2 <Tx_Verify+0x782>
 8001750:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001754:	d07d      	beq.n	8001852 <Tx_Verify+0x732>
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800175a:	f200 80a2 	bhi.w	80018a2 <Tx_Verify+0x782>
 800175e:	2bc8      	cmp	r3, #200	; 0xc8
 8001760:	d07b      	beq.n	800185a <Tx_Verify+0x73a>
 8001762:	2bc8      	cmp	r3, #200	; 0xc8
 8001764:	f200 809d 	bhi.w	80018a2 <Tx_Verify+0x782>
 8001768:	2b32      	cmp	r3, #50	; 0x32
 800176a:	d86b      	bhi.n	8001844 <Tx_Verify+0x724>
 800176c:	2b02      	cmp	r3, #2
 800176e:	f0c0 8098 	bcc.w	80018a2 <Tx_Verify+0x782>
 8001772:	3b02      	subs	r3, #2
 8001774:	2b30      	cmp	r3, #48	; 0x30
 8001776:	f200 8094 	bhi.w	80018a2 <Tx_Verify+0x782>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <Tx_Verify+0x660>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	0800189b 	.word	0x0800189b
 8001784:	080018a3 	.word	0x080018a3
 8001788:	08001893 	.word	0x08001893
 800178c:	0800188b 	.word	0x0800188b
 8001790:	080018a3 	.word	0x080018a3
 8001794:	080018a3 	.word	0x080018a3
 8001798:	080018a3 	.word	0x080018a3
 800179c:	080018a3 	.word	0x080018a3
 80017a0:	08001883 	.word	0x08001883
 80017a4:	080018a3 	.word	0x080018a3
 80017a8:	080018a3 	.word	0x080018a3
 80017ac:	080018a3 	.word	0x080018a3
 80017b0:	080018a3 	.word	0x080018a3
 80017b4:	080018a3 	.word	0x080018a3
 80017b8:	080018a3 	.word	0x080018a3
 80017bc:	080018a3 	.word	0x080018a3
 80017c0:	080018a3 	.word	0x080018a3
 80017c4:	080018a3 	.word	0x080018a3
 80017c8:	0800187b 	.word	0x0800187b
 80017cc:	080018a3 	.word	0x080018a3
 80017d0:	080018a3 	.word	0x080018a3
 80017d4:	080018a3 	.word	0x080018a3
 80017d8:	080018a3 	.word	0x080018a3
 80017dc:	080018a3 	.word	0x080018a3
 80017e0:	080018a3 	.word	0x080018a3
 80017e4:	080018a3 	.word	0x080018a3
 80017e8:	080018a3 	.word	0x080018a3
 80017ec:	080018a3 	.word	0x080018a3
 80017f0:	080018a3 	.word	0x080018a3
 80017f4:	080018a3 	.word	0x080018a3
 80017f8:	080018a3 	.word	0x080018a3
 80017fc:	080018a3 	.word	0x080018a3
 8001800:	080018a3 	.word	0x080018a3
 8001804:	080018a3 	.word	0x080018a3
 8001808:	080018a3 	.word	0x080018a3
 800180c:	080018a3 	.word	0x080018a3
 8001810:	080018a3 	.word	0x080018a3
 8001814:	080018a3 	.word	0x080018a3
 8001818:	08001873 	.word	0x08001873
 800181c:	080018a3 	.word	0x080018a3
 8001820:	080018a3 	.word	0x080018a3
 8001824:	080018a3 	.word	0x080018a3
 8001828:	080018a3 	.word	0x080018a3
 800182c:	080018a3 	.word	0x080018a3
 8001830:	080018a3 	.word	0x080018a3
 8001834:	080018a3 	.word	0x080018a3
 8001838:	080018a3 	.word	0x080018a3
 800183c:	080018a3 	.word	0x080018a3
 8001840:	0800186b 	.word	0x0800186b
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d00c      	beq.n	8001862 <Tx_Verify+0x742>
 8001848:	e02b      	b.n	80018a2 <Tx_Verify+0x782>
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <Tx_Verify+0x7e8>)
 800184c:	2201      	movs	r2, #1
 800184e:	719a      	strb	r2, [r3, #6]
 8001850:	e02a      	b.n	80018a8 <Tx_Verify+0x788>
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <Tx_Verify+0x7e8>)
 8001854:	2202      	movs	r2, #2
 8001856:	719a      	strb	r2, [r3, #6]
 8001858:	e026      	b.n	80018a8 <Tx_Verify+0x788>
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <Tx_Verify+0x7e8>)
 800185c:	2203      	movs	r2, #3
 800185e:	719a      	strb	r2, [r3, #6]
 8001860:	e022      	b.n	80018a8 <Tx_Verify+0x788>
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <Tx_Verify+0x7e8>)
 8001864:	2204      	movs	r2, #4
 8001866:	719a      	strb	r2, [r3, #6]
 8001868:	e01e      	b.n	80018a8 <Tx_Verify+0x788>
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <Tx_Verify+0x7e8>)
 800186c:	2205      	movs	r2, #5
 800186e:	719a      	strb	r2, [r3, #6]
 8001870:	e01a      	b.n	80018a8 <Tx_Verify+0x788>
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <Tx_Verify+0x7e8>)
 8001874:	2206      	movs	r2, #6
 8001876:	719a      	strb	r2, [r3, #6]
 8001878:	e016      	b.n	80018a8 <Tx_Verify+0x788>
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <Tx_Verify+0x7e8>)
 800187c:	2207      	movs	r2, #7
 800187e:	719a      	strb	r2, [r3, #6]
 8001880:	e012      	b.n	80018a8 <Tx_Verify+0x788>
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <Tx_Verify+0x7e8>)
 8001884:	2208      	movs	r2, #8
 8001886:	719a      	strb	r2, [r3, #6]
 8001888:	e00e      	b.n	80018a8 <Tx_Verify+0x788>
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <Tx_Verify+0x7e8>)
 800188c:	2209      	movs	r2, #9
 800188e:	719a      	strb	r2, [r3, #6]
 8001890:	e00a      	b.n	80018a8 <Tx_Verify+0x788>
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <Tx_Verify+0x7e8>)
 8001894:	220a      	movs	r2, #10
 8001896:	719a      	strb	r2, [r3, #6]
 8001898:	e006      	b.n	80018a8 <Tx_Verify+0x788>
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <Tx_Verify+0x7e8>)
 800189c:	220b      	movs	r2, #11
 800189e:	719a      	strb	r2, [r3, #6]
 80018a0:	e002      	b.n	80018a8 <Tx_Verify+0x788>
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <Tx_Verify+0x7e8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	719a      	strb	r2, [r3, #6]
 80018a8:	bf00      	nop

	if((HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) && (hcan->ErrorCode == 0))
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <Tx_Verify+0x7f0>)
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <Tx_Verify+0x7e8>)
 80018ae:	4919      	ldr	r1, [pc, #100]	; (8001914 <Tx_Verify+0x7f4>)
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f002 f99b 	bl	8003bec <HAL_CAN_AddTxMessage>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10b      	bne.n	80018d4 <Tx_Verify+0x7b4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <Tx_Verify+0x7b4>
		Verify_CAN |= 1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <Tx_Verify+0x7f8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <Tx_Verify+0x7f8>)
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e006      	b.n	80018e2 <Tx_Verify+0x7c2>
	else
		Verify_CAN &= 2;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <Tx_Verify+0x7f8>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <Tx_Verify+0x7f8>)
 80018e0:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e002      	b.n	80018ee <Tx_Verify+0x7ce>
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	3301      	adds	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f002 fa57 	bl	8003da2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d002      	beq.n	8001900 <Tx_Verify+0x7e0>
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d9f3      	bls.n	80018e8 <Tx_Verify+0x7c8>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000278 	.word	0x20000278
 800190c:	200002bc 	.word	0x200002bc
 8001910:	20000280 	.word	0x20000280
 8001914:	20000258 	.word	0x20000258
 8001918:	20000284 	.word	0x20000284

0800191c <Secundaria_CAN_Start>:

void Secundaria_CAN_Start(CAN_HandleTypeDef* hcan)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	; 0x38
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 800192c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 8001932:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800193c:	2301      	movs	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	b29b      	uxth	r3, r3
 800194c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	0b5b      	lsrs	r3, r3, #13
 8001952:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	b29b      	uxth	r3, r3
 800195a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001968:	230e      	movs	r3, #14
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f002 f816 	bl	80039a4 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	b29b      	uxth	r3, r3
 8001994:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	0b5b      	lsrs	r3, r3, #13
 800199a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80019b0:	230f      	movs	r3, #15
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 fff2 	bl	80039a4 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f002 f8cf 	bl	8003b64 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80019c6:	2102      	movs	r1, #2
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f002 fb31 	bl	8004030 <HAL_CAN_ActivateNotification>
}
 80019ce:	bf00      	nop
 80019d0:	3738      	adds	r7, #56	; 0x38
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <Secundaria_Transmit_Message>:

void Secundaria_Transmit_Message(CAN_HandleTypeDef* hcan, uint8_t can_msg)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
	switch(can_msg)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d820      	bhi.n	8001a2c <Secundaria_Transmit_Message+0x54>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <Secundaria_Transmit_Message+0x18>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a05 	.word	0x08001a05
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a15 	.word	0x08001a15
 80019fc:	08001a1d 	.word	0x08001a1d
 8001a00:	08001a25 	.word	0x08001a25
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff f993 	bl	8000d30 <Tx_Analog_1_4>
			break;
 8001a0a:	e010      	b.n	8001a2e <Secundaria_Transmit_Message+0x56>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fa0d 	bl	8000e2c <Tx_Analog_5_8>
			break;
 8001a12:	e00c      	b.n	8001a2e <Secundaria_Transmit_Message+0x56>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fa87 	bl	8000f28 <Tx_Analog_9_12>
			break;
 8001a1a:	e008      	b.n	8001a2e <Secundaria_Transmit_Message+0x56>

		case Analog_13_16:
			Tx_Analog_13_16(hcan);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fb01 	bl	8001024 <Tx_Analog_13_16>
			break;
 8001a22:	e004      	b.n	8001a2e <Secundaria_Transmit_Message+0x56>

		case Verify_Msg:
			Tx_Verify(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fb7b 	bl	8001120 <Tx_Verify>
			break;
 8001a2a:	e000      	b.n	8001a2e <Secundaria_Transmit_Message+0x56>

		default:
			return;
 8001a2c:	bf00      	nop
	}
}
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Secundaria_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Secundaria_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f000 f9ed 	bl	8001e20 <Load_EEPROM>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <Secundaria_Init+0x1c>
		Secundaria_Hard_Code_Init();
 8001a4c:	f000 f9ce 	bl	8001dec <Secundaria_Hard_Code_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Buffer[0], 8);
 8001a50:	2208      	movs	r2, #8
 8001a52:	4909      	ldr	r1, [pc, #36]	; (8001a78 <Secundaria_Init+0x44>)
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <Secundaria_Init+0x48>)
 8001a56:	f001 facb 	bl	8002ff0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_Buffer[8], 8);
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	4908      	ldr	r1, [pc, #32]	; (8001a80 <Secundaria_Init+0x4c>)
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <Secundaria_Init+0x50>)
 8001a60:	f001 fac6 	bl	8002ff0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f005 f98d 	bl	8006d84 <HAL_TIM_Base_Start_IT>

	Secundaria_CAN_Start(hcan);
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ff56 	bl	800191c <Secundaria_CAN_Start>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000288 	.word	0x20000288
 8001a7c:	20000028 	.word	0x20000028
 8001a80:	20000298 	.word	0x20000298
 8001a84:	20000070 	.word	0x20000070

08001a88 <Secundaria_Receive_Config>:

HAL_StatusTypeDef Secundaria_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	if(data[0] == 2)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 81a1 	bne.w	8001dde <Secundaria_Receive_Config+0x356>
	{
		__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	2b0a      	cmp	r3, #10
 8001aa6:	d847      	bhi.n	8001b38 <Secundaria_Receive_Config+0xb0>
 8001aa8:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <Secundaria_Receive_Config+0x28>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001add 	.word	0x08001add
 8001ab4:	08001ae7 	.word	0x08001ae7
 8001ab8:	08001af1 	.word	0x08001af1
 8001abc:	08001af9 	.word	0x08001af9
 8001ac0:	08001b01 	.word	0x08001b01
 8001ac4:	08001b09 	.word	0x08001b09
 8001ac8:	08001b11 	.word	0x08001b11
 8001acc:	08001b19 	.word	0x08001b19
 8001ad0:	08001b21 	.word	0x08001b21
 8001ad4:	08001b29 	.word	0x08001b29
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e02b      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001ae6:	4ba6      	ldr	r3, [pc, #664]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001ae8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e026      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001af0:	4ba3      	ldr	r3, [pc, #652]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001af2:	22c8      	movs	r2, #200	; 0xc8
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e022      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001af8:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001afa:	2264      	movs	r2, #100	; 0x64
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e01e      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b00:	4b9f      	ldr	r3, [pc, #636]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b02:	2232      	movs	r2, #50	; 0x32
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e01a      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b08:	4b9d      	ldr	r3, [pc, #628]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b0a:	2228      	movs	r2, #40	; 0x28
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e016      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b10:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b12:	2214      	movs	r2, #20
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e012      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b18:	4b99      	ldr	r3, [pc, #612]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b1a:	220a      	movs	r2, #10
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e00e      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b20:	4b97      	ldr	r3, [pc, #604]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b22:	2205      	movs	r2, #5
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e00a      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b28:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e006      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b30:	4b93      	ldr	r3, [pc, #588]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e002      	b.n	8001b3e <Secundaria_Receive_Config+0xb6>
 8001b38:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	bf00      	nop
		__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3302      	adds	r3, #2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	2b0a      	cmp	r3, #10
 8001b4a:	d847      	bhi.n	8001bdc <Secundaria_Receive_Config+0x154>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <Secundaria_Receive_Config+0xcc>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001b81 	.word	0x08001b81
 8001b58:	08001b8b 	.word	0x08001b8b
 8001b5c:	08001b95 	.word	0x08001b95
 8001b60:	08001b9d 	.word	0x08001b9d
 8001b64:	08001ba5 	.word	0x08001ba5
 8001b68:	08001bad 	.word	0x08001bad
 8001b6c:	08001bb5 	.word	0x08001bb5
 8001b70:	08001bbd 	.word	0x08001bbd
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bcd 	.word	0x08001bcd
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	e02b      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001b8a:	4b7d      	ldr	r3, [pc, #500]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e026      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b96:	22c8      	movs	r2, #200	; 0xc8
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e022      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001b9e:	2264      	movs	r2, #100	; 0x64
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e01e      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	e01a      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bac:	4b74      	ldr	r3, [pc, #464]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bae:	2228      	movs	r2, #40	; 0x28
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e016      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bb4:	4b72      	ldr	r3, [pc, #456]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bb6:	2214      	movs	r2, #20
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e012      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e00e      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bc4:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bc6:	2205      	movs	r2, #5
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	e00a      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e006      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e002      	b.n	8001be2 <Secundaria_Receive_Config+0x15a>
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	bf00      	nop
		__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3303      	adds	r3, #3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	2b0a      	cmp	r3, #10
 8001bee:	d847      	bhi.n	8001c80 <Secundaria_Receive_Config+0x1f8>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <Secundaria_Receive_Config+0x170>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c25 	.word	0x08001c25
 8001bfc:	08001c2f 	.word	0x08001c2f
 8001c00:	08001c39 	.word	0x08001c39
 8001c04:	08001c41 	.word	0x08001c41
 8001c08:	08001c49 	.word	0x08001c49
 8001c0c:	08001c51 	.word	0x08001c51
 8001c10:	08001c59 	.word	0x08001c59
 8001c14:	08001c61 	.word	0x08001c61
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c71 	.word	0x08001c71
 8001c20:	08001c79 	.word	0x08001c79
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e02b      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	e026      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c3a:	22c8      	movs	r2, #200	; 0xc8
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	e022      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c40:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c42:	2264      	movs	r2, #100	; 0x64
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	e01e      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c4a:	2232      	movs	r2, #50	; 0x32
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e01a      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c52:	2228      	movs	r2, #40	; 0x28
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e016      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c5a:	2214      	movs	r2, #20
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	e012      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c60:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c62:	220a      	movs	r2, #10
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	e00e      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	e00a      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	e006      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c78:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e002      	b.n	8001c86 <Secundaria_Receive_Config+0x1fe>
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	bf00      	nop
		__LOAD_FREQ(data[4], Per_Msg[Analog_13_16]);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	2b0a      	cmp	r3, #10
 8001c92:	d847      	bhi.n	8001d24 <Secundaria_Receive_Config+0x29c>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <Secundaria_Receive_Config+0x214>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cc9 	.word	0x08001cc9
 8001ca0:	08001cd3 	.word	0x08001cd3
 8001ca4:	08001cdd 	.word	0x08001cdd
 8001ca8:	08001ce5 	.word	0x08001ce5
 8001cac:	08001ced 	.word	0x08001ced
 8001cb0:	08001cf5 	.word	0x08001cf5
 8001cb4:	08001cfd 	.word	0x08001cfd
 8001cb8:	08001d05 	.word	0x08001d05
 8001cbc:	08001d0d 	.word	0x08001d0d
 8001cc0:	08001d15 	.word	0x08001d15
 8001cc4:	08001d1d 	.word	0x08001d1d
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	e02b      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	e026      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cde:	22c8      	movs	r2, #200	; 0xc8
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	e022      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e01e      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cee:	2232      	movs	r2, #50	; 0x32
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	e01a      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cf6:	2228      	movs	r2, #40	; 0x28
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	e016      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001cfe:	2214      	movs	r2, #20
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	e012      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d06:	220a      	movs	r2, #10
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	e00e      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d0e:	2205      	movs	r2, #5
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	e00a      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d16:	2204      	movs	r2, #4
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	e006      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	e002      	b.n	8001d2a <Secundaria_Receive_Config+0x2a2>
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	bf00      	nop
		__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3305      	adds	r3, #5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2b0a      	cmp	r3, #10
 8001d36:	d849      	bhi.n	8001dcc <Secundaria_Receive_Config+0x344>
 8001d38:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <Secundaria_Receive_Config+0x2b8>)
 8001d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3e:	bf00      	nop
 8001d40:	08001d6d 	.word	0x08001d6d
 8001d44:	08001d77 	.word	0x08001d77
 8001d48:	08001d85 	.word	0x08001d85
 8001d4c:	08001d8d 	.word	0x08001d8d
 8001d50:	08001d95 	.word	0x08001d95
 8001d54:	08001d9d 	.word	0x08001d9d
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001db5 	.word	0x08001db5
 8001d64:	08001dbd 	.word	0x08001dbd
 8001d68:	08001dc5 	.word	0x08001dc5
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	e02d      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001d76:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <Secundaria_Receive_Config+0x2f8>)
 8001d78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	e028      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001d80:	200002bc 	.word	0x200002bc
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001d86:	22c8      	movs	r2, #200	; 0xc8
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	e022      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001d8e:	2264      	movs	r2, #100	; 0x64
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	e01e      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001d96:	2232      	movs	r2, #50	; 0x32
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	e01a      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001d9e:	2228      	movs	r2, #40	; 0x28
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	e016      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001da6:	2214      	movs	r2, #20
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	e012      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001dae:	220a      	movs	r2, #10
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	e00e      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001db6:	2205      	movs	r2, #5
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	e00a      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	e006      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e002      	b.n	8001dd2 <Secundaria_Receive_Config+0x34a>
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <Secundaria_Receive_Config+0x360>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	bf00      	nop

		return Save_EEPROM(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9d9 	bl	800218c <Save_EEPROM>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	e000      	b.n	8001de0 <Secundaria_Receive_Config+0x358>
	}

	else
		return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200002bc 	.word	0x200002bc

08001dec <Secundaria_Hard_Code_Init>:

__weak void Secundaria_Hard_Code_Init(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	Per_Msg[Analog_1_4] = MSG_FREQ_50HZ;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <Secundaria_Hard_Code_Init+0x2c>)
 8001df2:	2214      	movs	r2, #20
 8001df4:	601a      	str	r2, [r3, #0]
	Per_Msg[Analog_5_8] = MSG_FREQ_100HZ;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <Secundaria_Hard_Code_Init+0x2c>)
 8001df8:	220a      	movs	r2, #10
 8001dfa:	605a      	str	r2, [r3, #4]
	Per_Msg[Analog_9_12] = MSG_FREQ_50HZ;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <Secundaria_Hard_Code_Init+0x2c>)
 8001dfe:	2214      	movs	r2, #20
 8001e00:	609a      	str	r2, [r3, #8]
	Per_Msg[Analog_13_16] = MSG_DISABLED;
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <Secundaria_Hard_Code_Init+0x2c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
	Per_Msg[Verify_Msg] = MSG_FREQ_5HZ;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <Secundaria_Hard_Code_Init+0x2c>)
 8001e0a:	22c8      	movs	r2, #200	; 0xc8
 8001e0c:	611a      	str	r2, [r3, #16]

	Save_EEPROM(&hi2c1);
 8001e0e:	4803      	ldr	r0, [pc, #12]	; (8001e1c <Secundaria_Hard_Code_Init+0x30>)
 8001e10:	f000 f9bc 	bl	800218c <Save_EEPROM>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200002bc 	.word	0x200002bc
 8001e1c:	200001a0 	.word	0x200001a0

08001e20 <Load_EEPROM>:


static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_READ];
	HAL_StatusTypeDef retVal;

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, 0x00, 1, EEPROM_TIMEOUT_WRITE);
 8001e28:	230a      	movs	r3, #10
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	2200      	movs	r2, #0
 8001e30:	21a0      	movs	r1, #160	; 0xa0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f003 fae0 	bl	80053f8 <HAL_I2C_Master_Transmit>

	retVal = HAL_I2C_Master_Receive(hi2c, EEPROM_ADDRESS_READ, buffer, EEPROM_BUFFER_SIZE_READ, EEPROM_TIMEOUT_READ);
 8001e38:	f107 0208 	add.w	r2, r7, #8
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2305      	movs	r3, #5
 8001e42:	21a1      	movs	r1, #161	; 0xa1
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f003 fbd5 	bl	80055f4 <HAL_I2C_Master_Receive>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]

	if(retVal != HAL_OK)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <Load_EEPROM+0x38>
		return retVal;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	e192      	b.n	800217e <Load_EEPROM+0x35e>

	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8001e58:	7a3b      	ldrb	r3, [r7, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d847      	bhi.n	8001ef0 <Load_EEPROM+0xd0>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <Load_EEPROM+0x48>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e95 	.word	0x08001e95
 8001e6c:	08001e9f 	.word	0x08001e9f
 8001e70:	08001ea9 	.word	0x08001ea9
 8001e74:	08001eb1 	.word	0x08001eb1
 8001e78:	08001eb9 	.word	0x08001eb9
 8001e7c:	08001ec1 	.word	0x08001ec1
 8001e80:	08001ec9 	.word	0x08001ec9
 8001e84:	08001ed1 	.word	0x08001ed1
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001ee1 	.word	0x08001ee1
 8001e90:	08001ee9 	.word	0x08001ee9
 8001e94:	4ba8      	ldr	r3, [pc, #672]	; (8002138 <Load_EEPROM+0x318>)
 8001e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e02b      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	; (8002138 <Load_EEPROM+0x318>)
 8001ea0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e026      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ea8:	4ba3      	ldr	r3, [pc, #652]	; (8002138 <Load_EEPROM+0x318>)
 8001eaa:	22c8      	movs	r2, #200	; 0xc8
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e022      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001eb0:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <Load_EEPROM+0x318>)
 8001eb2:	2264      	movs	r2, #100	; 0x64
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e01e      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001eb8:	4b9f      	ldr	r3, [pc, #636]	; (8002138 <Load_EEPROM+0x318>)
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e01a      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ec0:	4b9d      	ldr	r3, [pc, #628]	; (8002138 <Load_EEPROM+0x318>)
 8001ec2:	2228      	movs	r2, #40	; 0x28
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e016      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ec8:	4b9b      	ldr	r3, [pc, #620]	; (8002138 <Load_EEPROM+0x318>)
 8001eca:	2214      	movs	r2, #20
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e012      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <Load_EEPROM+0x318>)
 8001ed2:	220a      	movs	r2, #10
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00e      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ed8:	4b97      	ldr	r3, [pc, #604]	; (8002138 <Load_EEPROM+0x318>)
 8001eda:	2205      	movs	r2, #5
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e00a      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ee0:	4b95      	ldr	r3, [pc, #596]	; (8002138 <Load_EEPROM+0x318>)
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e006      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ee8:	4b93      	ldr	r3, [pc, #588]	; (8002138 <Load_EEPROM+0x318>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e002      	b.n	8001ef6 <Load_EEPROM+0xd6>
 8001ef0:	4b91      	ldr	r3, [pc, #580]	; (8002138 <Load_EEPROM+0x318>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	bf00      	nop
	__LOAD_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8001ef8:	7a7b      	ldrb	r3, [r7, #9]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	2b0a      	cmp	r3, #10
 8001efe:	d847      	bhi.n	8001f90 <Load_EEPROM+0x170>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <Load_EEPROM+0xe8>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f35 	.word	0x08001f35
 8001f0c:	08001f3f 	.word	0x08001f3f
 8001f10:	08001f49 	.word	0x08001f49
 8001f14:	08001f51 	.word	0x08001f51
 8001f18:	08001f59 	.word	0x08001f59
 8001f1c:	08001f61 	.word	0x08001f61
 8001f20:	08001f69 	.word	0x08001f69
 8001f24:	08001f71 	.word	0x08001f71
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001f89 	.word	0x08001f89
 8001f34:	4b80      	ldr	r3, [pc, #512]	; (8002138 <Load_EEPROM+0x318>)
 8001f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	e02b      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f3e:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <Load_EEPROM+0x318>)
 8001f40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	e026      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f48:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <Load_EEPROM+0x318>)
 8001f4a:	22c8      	movs	r2, #200	; 0xc8
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e022      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <Load_EEPROM+0x318>)
 8001f52:	2264      	movs	r2, #100	; 0x64
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e01e      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f58:	4b77      	ldr	r3, [pc, #476]	; (8002138 <Load_EEPROM+0x318>)
 8001f5a:	2232      	movs	r2, #50	; 0x32
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	e01a      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f60:	4b75      	ldr	r3, [pc, #468]	; (8002138 <Load_EEPROM+0x318>)
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	e016      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <Load_EEPROM+0x318>)
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e012      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f70:	4b71      	ldr	r3, [pc, #452]	; (8002138 <Load_EEPROM+0x318>)
 8001f72:	220a      	movs	r2, #10
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e00e      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <Load_EEPROM+0x318>)
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	e00a      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f80:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <Load_EEPROM+0x318>)
 8001f82:	2204      	movs	r2, #4
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e006      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <Load_EEPROM+0x318>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	e002      	b.n	8001f96 <Load_EEPROM+0x176>
 8001f90:	4b69      	ldr	r3, [pc, #420]	; (8002138 <Load_EEPROM+0x318>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	bf00      	nop
	__LOAD_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	2b0a      	cmp	r3, #10
 8001f9e:	d847      	bhi.n	8002030 <Load_EEPROM+0x210>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <Load_EEPROM+0x188>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	08001fdf 	.word	0x08001fdf
 8001fb0:	08001fe9 	.word	0x08001fe9
 8001fb4:	08001ff1 	.word	0x08001ff1
 8001fb8:	08001ff9 	.word	0x08001ff9
 8001fbc:	08002001 	.word	0x08002001
 8001fc0:	08002009 	.word	0x08002009
 8001fc4:	08002011 	.word	0x08002011
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	08002021 	.word	0x08002021
 8001fd0:	08002029 	.word	0x08002029
 8001fd4:	4b58      	ldr	r3, [pc, #352]	; (8002138 <Load_EEPROM+0x318>)
 8001fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e02b      	b.n	8002036 <Load_EEPROM+0x216>
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <Load_EEPROM+0x318>)
 8001fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	e026      	b.n	8002036 <Load_EEPROM+0x216>
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <Load_EEPROM+0x318>)
 8001fea:	22c8      	movs	r2, #200	; 0xc8
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e022      	b.n	8002036 <Load_EEPROM+0x216>
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <Load_EEPROM+0x318>)
 8001ff2:	2264      	movs	r2, #100	; 0x64
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	e01e      	b.n	8002036 <Load_EEPROM+0x216>
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <Load_EEPROM+0x318>)
 8001ffa:	2232      	movs	r2, #50	; 0x32
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	e01a      	b.n	8002036 <Load_EEPROM+0x216>
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <Load_EEPROM+0x318>)
 8002002:	2228      	movs	r2, #40	; 0x28
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e016      	b.n	8002036 <Load_EEPROM+0x216>
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <Load_EEPROM+0x318>)
 800200a:	2214      	movs	r2, #20
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	e012      	b.n	8002036 <Load_EEPROM+0x216>
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <Load_EEPROM+0x318>)
 8002012:	220a      	movs	r2, #10
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	e00e      	b.n	8002036 <Load_EEPROM+0x216>
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <Load_EEPROM+0x318>)
 800201a:	2205      	movs	r2, #5
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	e00a      	b.n	8002036 <Load_EEPROM+0x216>
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <Load_EEPROM+0x318>)
 8002022:	2204      	movs	r2, #4
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e006      	b.n	8002036 <Load_EEPROM+0x216>
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <Load_EEPROM+0x318>)
 800202a:	2202      	movs	r2, #2
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	e002      	b.n	8002036 <Load_EEPROM+0x216>
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <Load_EEPROM+0x318>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	bf00      	nop
	__LOAD_FREQ(buffer[3], Per_Msg[Analog_13_16]);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	3b01      	subs	r3, #1
 800203c:	2b0a      	cmp	r3, #10
 800203e:	d847      	bhi.n	80020d0 <Load_EEPROM+0x2b0>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <Load_EEPROM+0x228>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002075 	.word	0x08002075
 800204c:	0800207f 	.word	0x0800207f
 8002050:	08002089 	.word	0x08002089
 8002054:	08002091 	.word	0x08002091
 8002058:	08002099 	.word	0x08002099
 800205c:	080020a1 	.word	0x080020a1
 8002060:	080020a9 	.word	0x080020a9
 8002064:	080020b1 	.word	0x080020b1
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080020c1 	.word	0x080020c1
 8002070:	080020c9 	.word	0x080020c9
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <Load_EEPROM+0x318>)
 8002076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	e02b      	b.n	80020d6 <Load_EEPROM+0x2b6>
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <Load_EEPROM+0x318>)
 8002080:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	e026      	b.n	80020d6 <Load_EEPROM+0x2b6>
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <Load_EEPROM+0x318>)
 800208a:	22c8      	movs	r2, #200	; 0xc8
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	e022      	b.n	80020d6 <Load_EEPROM+0x2b6>
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <Load_EEPROM+0x318>)
 8002092:	2264      	movs	r2, #100	; 0x64
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	e01e      	b.n	80020d6 <Load_EEPROM+0x2b6>
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <Load_EEPROM+0x318>)
 800209a:	2232      	movs	r2, #50	; 0x32
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	e01a      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <Load_EEPROM+0x318>)
 80020a2:	2228      	movs	r2, #40	; 0x28
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	e016      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <Load_EEPROM+0x318>)
 80020aa:	2214      	movs	r2, #20
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	e012      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <Load_EEPROM+0x318>)
 80020b2:	220a      	movs	r2, #10
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	e00e      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <Load_EEPROM+0x318>)
 80020ba:	2205      	movs	r2, #5
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e00a      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <Load_EEPROM+0x318>)
 80020c2:	2204      	movs	r2, #4
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	e006      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <Load_EEPROM+0x318>)
 80020ca:	2202      	movs	r2, #2
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	e002      	b.n	80020d6 <Load_EEPROM+0x2b6>
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <Load_EEPROM+0x318>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	bf00      	nop
	__LOAD_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 80020d8:	7b3b      	ldrb	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	2b0a      	cmp	r3, #10
 80020de:	d849      	bhi.n	8002174 <Load_EEPROM+0x354>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <Load_EEPROM+0x2c8>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	08002115 	.word	0x08002115
 80020ec:	0800211f 	.word	0x0800211f
 80020f0:	08002129 	.word	0x08002129
 80020f4:	08002131 	.word	0x08002131
 80020f8:	0800213d 	.word	0x0800213d
 80020fc:	08002145 	.word	0x08002145
 8002100:	0800214d 	.word	0x0800214d
 8002104:	08002155 	.word	0x08002155
 8002108:	0800215d 	.word	0x0800215d
 800210c:	08002165 	.word	0x08002165
 8002110:	0800216d 	.word	0x0800216d
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <Load_EEPROM+0x318>)
 8002116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	e02d      	b.n	800217a <Load_EEPROM+0x35a>
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <Load_EEPROM+0x318>)
 8002120:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002124:	611a      	str	r2, [r3, #16]
 8002126:	e028      	b.n	800217a <Load_EEPROM+0x35a>
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <Load_EEPROM+0x318>)
 800212a:	22c8      	movs	r2, #200	; 0xc8
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e024      	b.n	800217a <Load_EEPROM+0x35a>
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <Load_EEPROM+0x318>)
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e020      	b.n	800217a <Load_EEPROM+0x35a>
 8002138:	200002bc 	.word	0x200002bc
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <Load_EEPROM+0x368>)
 800213e:	2232      	movs	r2, #50	; 0x32
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	e01a      	b.n	800217a <Load_EEPROM+0x35a>
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <Load_EEPROM+0x368>)
 8002146:	2228      	movs	r2, #40	; 0x28
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	e016      	b.n	800217a <Load_EEPROM+0x35a>
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <Load_EEPROM+0x368>)
 800214e:	2214      	movs	r2, #20
 8002150:	611a      	str	r2, [r3, #16]
 8002152:	e012      	b.n	800217a <Load_EEPROM+0x35a>
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <Load_EEPROM+0x368>)
 8002156:	220a      	movs	r2, #10
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e00e      	b.n	800217a <Load_EEPROM+0x35a>
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <Load_EEPROM+0x368>)
 800215e:	2205      	movs	r2, #5
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e00a      	b.n	800217a <Load_EEPROM+0x35a>
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <Load_EEPROM+0x368>)
 8002166:	2204      	movs	r2, #4
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	e006      	b.n	800217a <Load_EEPROM+0x35a>
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <Load_EEPROM+0x368>)
 800216e:	2202      	movs	r2, #2
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	e002      	b.n	800217a <Load_EEPROM+0x35a>
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <Load_EEPROM+0x368>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
 800217a:	bf00      	nop

	return retVal;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002bc 	.word	0x200002bc

0800218c <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_WRITE];

	buffer[0] = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	723b      	strb	r3, [r7, #8]

	__SAVE_FREQ(buffer[1], Per_Msg[Analog_1_4]);
 8002198:	4ba9      	ldr	r3, [pc, #676]	; (8002440 <Save_EEPROM+0x2b4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	f000 8081 	beq.w	80022a6 <Save_EEPROM+0x11a>
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	f200 809e 	bhi.w	80022e8 <Save_EEPROM+0x15c>
 80021ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b0:	d07c      	beq.n	80022ac <Save_EEPROM+0x120>
 80021b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b6:	f200 8097 	bhi.w	80022e8 <Save_EEPROM+0x15c>
 80021ba:	2bc8      	cmp	r3, #200	; 0xc8
 80021bc:	d079      	beq.n	80022b2 <Save_EEPROM+0x126>
 80021be:	2bc8      	cmp	r3, #200	; 0xc8
 80021c0:	f200 8092 	bhi.w	80022e8 <Save_EEPROM+0x15c>
 80021c4:	2b32      	cmp	r3, #50	; 0x32
 80021c6:	d86b      	bhi.n	80022a0 <Save_EEPROM+0x114>
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	f0c0 808d 	bcc.w	80022e8 <Save_EEPROM+0x15c>
 80021ce:	3b02      	subs	r3, #2
 80021d0:	2b30      	cmp	r3, #48	; 0x30
 80021d2:	f200 8089 	bhi.w	80022e8 <Save_EEPROM+0x15c>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <Save_EEPROM+0x50>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080022e3 	.word	0x080022e3
 80021e0:	080022e9 	.word	0x080022e9
 80021e4:	080022dd 	.word	0x080022dd
 80021e8:	080022d7 	.word	0x080022d7
 80021ec:	080022e9 	.word	0x080022e9
 80021f0:	080022e9 	.word	0x080022e9
 80021f4:	080022e9 	.word	0x080022e9
 80021f8:	080022e9 	.word	0x080022e9
 80021fc:	080022d1 	.word	0x080022d1
 8002200:	080022e9 	.word	0x080022e9
 8002204:	080022e9 	.word	0x080022e9
 8002208:	080022e9 	.word	0x080022e9
 800220c:	080022e9 	.word	0x080022e9
 8002210:	080022e9 	.word	0x080022e9
 8002214:	080022e9 	.word	0x080022e9
 8002218:	080022e9 	.word	0x080022e9
 800221c:	080022e9 	.word	0x080022e9
 8002220:	080022e9 	.word	0x080022e9
 8002224:	080022cb 	.word	0x080022cb
 8002228:	080022e9 	.word	0x080022e9
 800222c:	080022e9 	.word	0x080022e9
 8002230:	080022e9 	.word	0x080022e9
 8002234:	080022e9 	.word	0x080022e9
 8002238:	080022e9 	.word	0x080022e9
 800223c:	080022e9 	.word	0x080022e9
 8002240:	080022e9 	.word	0x080022e9
 8002244:	080022e9 	.word	0x080022e9
 8002248:	080022e9 	.word	0x080022e9
 800224c:	080022e9 	.word	0x080022e9
 8002250:	080022e9 	.word	0x080022e9
 8002254:	080022e9 	.word	0x080022e9
 8002258:	080022e9 	.word	0x080022e9
 800225c:	080022e9 	.word	0x080022e9
 8002260:	080022e9 	.word	0x080022e9
 8002264:	080022e9 	.word	0x080022e9
 8002268:	080022e9 	.word	0x080022e9
 800226c:	080022e9 	.word	0x080022e9
 8002270:	080022e9 	.word	0x080022e9
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022e9 	.word	0x080022e9
 800227c:	080022e9 	.word	0x080022e9
 8002280:	080022e9 	.word	0x080022e9
 8002284:	080022e9 	.word	0x080022e9
 8002288:	080022e9 	.word	0x080022e9
 800228c:	080022e9 	.word	0x080022e9
 8002290:	080022e9 	.word	0x080022e9
 8002294:	080022e9 	.word	0x080022e9
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080022bf 	.word	0x080022bf
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d009      	beq.n	80022b8 <Save_EEPROM+0x12c>
 80022a4:	e020      	b.n	80022e8 <Save_EEPROM+0x15c>
 80022a6:	2301      	movs	r3, #1
 80022a8:	727b      	strb	r3, [r7, #9]
 80022aa:	e01f      	b.n	80022ec <Save_EEPROM+0x160>
 80022ac:	2302      	movs	r3, #2
 80022ae:	727b      	strb	r3, [r7, #9]
 80022b0:	e01c      	b.n	80022ec <Save_EEPROM+0x160>
 80022b2:	2303      	movs	r3, #3
 80022b4:	727b      	strb	r3, [r7, #9]
 80022b6:	e019      	b.n	80022ec <Save_EEPROM+0x160>
 80022b8:	2304      	movs	r3, #4
 80022ba:	727b      	strb	r3, [r7, #9]
 80022bc:	e016      	b.n	80022ec <Save_EEPROM+0x160>
 80022be:	2305      	movs	r3, #5
 80022c0:	727b      	strb	r3, [r7, #9]
 80022c2:	e013      	b.n	80022ec <Save_EEPROM+0x160>
 80022c4:	2306      	movs	r3, #6
 80022c6:	727b      	strb	r3, [r7, #9]
 80022c8:	e010      	b.n	80022ec <Save_EEPROM+0x160>
 80022ca:	2307      	movs	r3, #7
 80022cc:	727b      	strb	r3, [r7, #9]
 80022ce:	e00d      	b.n	80022ec <Save_EEPROM+0x160>
 80022d0:	2308      	movs	r3, #8
 80022d2:	727b      	strb	r3, [r7, #9]
 80022d4:	e00a      	b.n	80022ec <Save_EEPROM+0x160>
 80022d6:	2309      	movs	r3, #9
 80022d8:	727b      	strb	r3, [r7, #9]
 80022da:	e007      	b.n	80022ec <Save_EEPROM+0x160>
 80022dc:	230a      	movs	r3, #10
 80022de:	727b      	strb	r3, [r7, #9]
 80022e0:	e004      	b.n	80022ec <Save_EEPROM+0x160>
 80022e2:	230b      	movs	r3, #11
 80022e4:	727b      	strb	r3, [r7, #9]
 80022e6:	e001      	b.n	80022ec <Save_EEPROM+0x160>
 80022e8:	2300      	movs	r3, #0
 80022ea:	727b      	strb	r3, [r7, #9]
 80022ec:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_5_8]);
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <Save_EEPROM+0x2b4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f6:	f000 8082 	beq.w	80023fe <Save_EEPROM+0x272>
 80022fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022fe:	f200 80a1 	bhi.w	8002444 <Save_EEPROM+0x2b8>
 8002302:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002306:	d07d      	beq.n	8002404 <Save_EEPROM+0x278>
 8002308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800230c:	f200 809a 	bhi.w	8002444 <Save_EEPROM+0x2b8>
 8002310:	2bc8      	cmp	r3, #200	; 0xc8
 8002312:	d07a      	beq.n	800240a <Save_EEPROM+0x27e>
 8002314:	2bc8      	cmp	r3, #200	; 0xc8
 8002316:	f200 8095 	bhi.w	8002444 <Save_EEPROM+0x2b8>
 800231a:	2b32      	cmp	r3, #50	; 0x32
 800231c:	d86c      	bhi.n	80023f8 <Save_EEPROM+0x26c>
 800231e:	2b02      	cmp	r3, #2
 8002320:	f0c0 8090 	bcc.w	8002444 <Save_EEPROM+0x2b8>
 8002324:	3b02      	subs	r3, #2
 8002326:	2b30      	cmp	r3, #48	; 0x30
 8002328:	f200 808c 	bhi.w	8002444 <Save_EEPROM+0x2b8>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <Save_EEPROM+0x1a8>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	0800243b 	.word	0x0800243b
 8002338:	08002445 	.word	0x08002445
 800233c:	08002435 	.word	0x08002435
 8002340:	0800242f 	.word	0x0800242f
 8002344:	08002445 	.word	0x08002445
 8002348:	08002445 	.word	0x08002445
 800234c:	08002445 	.word	0x08002445
 8002350:	08002445 	.word	0x08002445
 8002354:	08002429 	.word	0x08002429
 8002358:	08002445 	.word	0x08002445
 800235c:	08002445 	.word	0x08002445
 8002360:	08002445 	.word	0x08002445
 8002364:	08002445 	.word	0x08002445
 8002368:	08002445 	.word	0x08002445
 800236c:	08002445 	.word	0x08002445
 8002370:	08002445 	.word	0x08002445
 8002374:	08002445 	.word	0x08002445
 8002378:	08002445 	.word	0x08002445
 800237c:	08002423 	.word	0x08002423
 8002380:	08002445 	.word	0x08002445
 8002384:	08002445 	.word	0x08002445
 8002388:	08002445 	.word	0x08002445
 800238c:	08002445 	.word	0x08002445
 8002390:	08002445 	.word	0x08002445
 8002394:	08002445 	.word	0x08002445
 8002398:	08002445 	.word	0x08002445
 800239c:	08002445 	.word	0x08002445
 80023a0:	08002445 	.word	0x08002445
 80023a4:	08002445 	.word	0x08002445
 80023a8:	08002445 	.word	0x08002445
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002445 	.word	0x08002445
 80023b4:	08002445 	.word	0x08002445
 80023b8:	08002445 	.word	0x08002445
 80023bc:	08002445 	.word	0x08002445
 80023c0:	08002445 	.word	0x08002445
 80023c4:	08002445 	.word	0x08002445
 80023c8:	08002445 	.word	0x08002445
 80023cc:	0800241d 	.word	0x0800241d
 80023d0:	08002445 	.word	0x08002445
 80023d4:	08002445 	.word	0x08002445
 80023d8:	08002445 	.word	0x08002445
 80023dc:	08002445 	.word	0x08002445
 80023e0:	08002445 	.word	0x08002445
 80023e4:	08002445 	.word	0x08002445
 80023e8:	08002445 	.word	0x08002445
 80023ec:	08002445 	.word	0x08002445
 80023f0:	08002445 	.word	0x08002445
 80023f4:	08002417 	.word	0x08002417
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d009      	beq.n	8002410 <Save_EEPROM+0x284>
 80023fc:	e022      	b.n	8002444 <Save_EEPROM+0x2b8>
 80023fe:	2301      	movs	r3, #1
 8002400:	72bb      	strb	r3, [r7, #10]
 8002402:	e021      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002404:	2302      	movs	r3, #2
 8002406:	72bb      	strb	r3, [r7, #10]
 8002408:	e01e      	b.n	8002448 <Save_EEPROM+0x2bc>
 800240a:	2303      	movs	r3, #3
 800240c:	72bb      	strb	r3, [r7, #10]
 800240e:	e01b      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002410:	2304      	movs	r3, #4
 8002412:	72bb      	strb	r3, [r7, #10]
 8002414:	e018      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002416:	2305      	movs	r3, #5
 8002418:	72bb      	strb	r3, [r7, #10]
 800241a:	e015      	b.n	8002448 <Save_EEPROM+0x2bc>
 800241c:	2306      	movs	r3, #6
 800241e:	72bb      	strb	r3, [r7, #10]
 8002420:	e012      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002422:	2307      	movs	r3, #7
 8002424:	72bb      	strb	r3, [r7, #10]
 8002426:	e00f      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002428:	2308      	movs	r3, #8
 800242a:	72bb      	strb	r3, [r7, #10]
 800242c:	e00c      	b.n	8002448 <Save_EEPROM+0x2bc>
 800242e:	2309      	movs	r3, #9
 8002430:	72bb      	strb	r3, [r7, #10]
 8002432:	e009      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002434:	230a      	movs	r3, #10
 8002436:	72bb      	strb	r3, [r7, #10]
 8002438:	e006      	b.n	8002448 <Save_EEPROM+0x2bc>
 800243a:	230b      	movs	r3, #11
 800243c:	72bb      	strb	r3, [r7, #10]
 800243e:	e003      	b.n	8002448 <Save_EEPROM+0x2bc>
 8002440:	200002bc 	.word	0x200002bc
 8002444:	2300      	movs	r3, #0
 8002446:	72bb      	strb	r3, [r7, #10]
 8002448:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[Analog_9_12]);
 800244a:	4baa      	ldr	r3, [pc, #680]	; (80026f4 <Save_EEPROM+0x568>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002452:	f000 8082 	beq.w	800255a <Save_EEPROM+0x3ce>
 8002456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245a:	f200 809f 	bhi.w	800259c <Save_EEPROM+0x410>
 800245e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002462:	d07d      	beq.n	8002560 <Save_EEPROM+0x3d4>
 8002464:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002468:	f200 8098 	bhi.w	800259c <Save_EEPROM+0x410>
 800246c:	2bc8      	cmp	r3, #200	; 0xc8
 800246e:	d07a      	beq.n	8002566 <Save_EEPROM+0x3da>
 8002470:	2bc8      	cmp	r3, #200	; 0xc8
 8002472:	f200 8093 	bhi.w	800259c <Save_EEPROM+0x410>
 8002476:	2b32      	cmp	r3, #50	; 0x32
 8002478:	d86c      	bhi.n	8002554 <Save_EEPROM+0x3c8>
 800247a:	2b02      	cmp	r3, #2
 800247c:	f0c0 808e 	bcc.w	800259c <Save_EEPROM+0x410>
 8002480:	3b02      	subs	r3, #2
 8002482:	2b30      	cmp	r3, #48	; 0x30
 8002484:	f200 808a 	bhi.w	800259c <Save_EEPROM+0x410>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <Save_EEPROM+0x304>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	08002597 	.word	0x08002597
 8002494:	0800259d 	.word	0x0800259d
 8002498:	08002591 	.word	0x08002591
 800249c:	0800258b 	.word	0x0800258b
 80024a0:	0800259d 	.word	0x0800259d
 80024a4:	0800259d 	.word	0x0800259d
 80024a8:	0800259d 	.word	0x0800259d
 80024ac:	0800259d 	.word	0x0800259d
 80024b0:	08002585 	.word	0x08002585
 80024b4:	0800259d 	.word	0x0800259d
 80024b8:	0800259d 	.word	0x0800259d
 80024bc:	0800259d 	.word	0x0800259d
 80024c0:	0800259d 	.word	0x0800259d
 80024c4:	0800259d 	.word	0x0800259d
 80024c8:	0800259d 	.word	0x0800259d
 80024cc:	0800259d 	.word	0x0800259d
 80024d0:	0800259d 	.word	0x0800259d
 80024d4:	0800259d 	.word	0x0800259d
 80024d8:	0800257f 	.word	0x0800257f
 80024dc:	0800259d 	.word	0x0800259d
 80024e0:	0800259d 	.word	0x0800259d
 80024e4:	0800259d 	.word	0x0800259d
 80024e8:	0800259d 	.word	0x0800259d
 80024ec:	0800259d 	.word	0x0800259d
 80024f0:	0800259d 	.word	0x0800259d
 80024f4:	0800259d 	.word	0x0800259d
 80024f8:	0800259d 	.word	0x0800259d
 80024fc:	0800259d 	.word	0x0800259d
 8002500:	0800259d 	.word	0x0800259d
 8002504:	0800259d 	.word	0x0800259d
 8002508:	0800259d 	.word	0x0800259d
 800250c:	0800259d 	.word	0x0800259d
 8002510:	0800259d 	.word	0x0800259d
 8002514:	0800259d 	.word	0x0800259d
 8002518:	0800259d 	.word	0x0800259d
 800251c:	0800259d 	.word	0x0800259d
 8002520:	0800259d 	.word	0x0800259d
 8002524:	0800259d 	.word	0x0800259d
 8002528:	08002579 	.word	0x08002579
 800252c:	0800259d 	.word	0x0800259d
 8002530:	0800259d 	.word	0x0800259d
 8002534:	0800259d 	.word	0x0800259d
 8002538:	0800259d 	.word	0x0800259d
 800253c:	0800259d 	.word	0x0800259d
 8002540:	0800259d 	.word	0x0800259d
 8002544:	0800259d 	.word	0x0800259d
 8002548:	0800259d 	.word	0x0800259d
 800254c:	0800259d 	.word	0x0800259d
 8002550:	08002573 	.word	0x08002573
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d009      	beq.n	800256c <Save_EEPROM+0x3e0>
 8002558:	e020      	b.n	800259c <Save_EEPROM+0x410>
 800255a:	2301      	movs	r3, #1
 800255c:	72fb      	strb	r3, [r7, #11]
 800255e:	e01f      	b.n	80025a0 <Save_EEPROM+0x414>
 8002560:	2302      	movs	r3, #2
 8002562:	72fb      	strb	r3, [r7, #11]
 8002564:	e01c      	b.n	80025a0 <Save_EEPROM+0x414>
 8002566:	2303      	movs	r3, #3
 8002568:	72fb      	strb	r3, [r7, #11]
 800256a:	e019      	b.n	80025a0 <Save_EEPROM+0x414>
 800256c:	2304      	movs	r3, #4
 800256e:	72fb      	strb	r3, [r7, #11]
 8002570:	e016      	b.n	80025a0 <Save_EEPROM+0x414>
 8002572:	2305      	movs	r3, #5
 8002574:	72fb      	strb	r3, [r7, #11]
 8002576:	e013      	b.n	80025a0 <Save_EEPROM+0x414>
 8002578:	2306      	movs	r3, #6
 800257a:	72fb      	strb	r3, [r7, #11]
 800257c:	e010      	b.n	80025a0 <Save_EEPROM+0x414>
 800257e:	2307      	movs	r3, #7
 8002580:	72fb      	strb	r3, [r7, #11]
 8002582:	e00d      	b.n	80025a0 <Save_EEPROM+0x414>
 8002584:	2308      	movs	r3, #8
 8002586:	72fb      	strb	r3, [r7, #11]
 8002588:	e00a      	b.n	80025a0 <Save_EEPROM+0x414>
 800258a:	2309      	movs	r3, #9
 800258c:	72fb      	strb	r3, [r7, #11]
 800258e:	e007      	b.n	80025a0 <Save_EEPROM+0x414>
 8002590:	230a      	movs	r3, #10
 8002592:	72fb      	strb	r3, [r7, #11]
 8002594:	e004      	b.n	80025a0 <Save_EEPROM+0x414>
 8002596:	230b      	movs	r3, #11
 8002598:	72fb      	strb	r3, [r7, #11]
 800259a:	e001      	b.n	80025a0 <Save_EEPROM+0x414>
 800259c:	2300      	movs	r3, #0
 800259e:	72fb      	strb	r3, [r7, #11]
 80025a0:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Analog_13_16]);
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <Save_EEPROM+0x568>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025aa:	f000 8082 	beq.w	80026b2 <Save_EEPROM+0x526>
 80025ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b2:	f200 80a1 	bhi.w	80026f8 <Save_EEPROM+0x56c>
 80025b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025ba:	d07d      	beq.n	80026b8 <Save_EEPROM+0x52c>
 80025bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025c0:	f200 809a 	bhi.w	80026f8 <Save_EEPROM+0x56c>
 80025c4:	2bc8      	cmp	r3, #200	; 0xc8
 80025c6:	d07a      	beq.n	80026be <Save_EEPROM+0x532>
 80025c8:	2bc8      	cmp	r3, #200	; 0xc8
 80025ca:	f200 8095 	bhi.w	80026f8 <Save_EEPROM+0x56c>
 80025ce:	2b32      	cmp	r3, #50	; 0x32
 80025d0:	d86c      	bhi.n	80026ac <Save_EEPROM+0x520>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	f0c0 8090 	bcc.w	80026f8 <Save_EEPROM+0x56c>
 80025d8:	3b02      	subs	r3, #2
 80025da:	2b30      	cmp	r3, #48	; 0x30
 80025dc:	f200 808c 	bhi.w	80026f8 <Save_EEPROM+0x56c>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <Save_EEPROM+0x45c>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	080026ef 	.word	0x080026ef
 80025ec:	080026f9 	.word	0x080026f9
 80025f0:	080026e9 	.word	0x080026e9
 80025f4:	080026e3 	.word	0x080026e3
 80025f8:	080026f9 	.word	0x080026f9
 80025fc:	080026f9 	.word	0x080026f9
 8002600:	080026f9 	.word	0x080026f9
 8002604:	080026f9 	.word	0x080026f9
 8002608:	080026dd 	.word	0x080026dd
 800260c:	080026f9 	.word	0x080026f9
 8002610:	080026f9 	.word	0x080026f9
 8002614:	080026f9 	.word	0x080026f9
 8002618:	080026f9 	.word	0x080026f9
 800261c:	080026f9 	.word	0x080026f9
 8002620:	080026f9 	.word	0x080026f9
 8002624:	080026f9 	.word	0x080026f9
 8002628:	080026f9 	.word	0x080026f9
 800262c:	080026f9 	.word	0x080026f9
 8002630:	080026d7 	.word	0x080026d7
 8002634:	080026f9 	.word	0x080026f9
 8002638:	080026f9 	.word	0x080026f9
 800263c:	080026f9 	.word	0x080026f9
 8002640:	080026f9 	.word	0x080026f9
 8002644:	080026f9 	.word	0x080026f9
 8002648:	080026f9 	.word	0x080026f9
 800264c:	080026f9 	.word	0x080026f9
 8002650:	080026f9 	.word	0x080026f9
 8002654:	080026f9 	.word	0x080026f9
 8002658:	080026f9 	.word	0x080026f9
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026f9 	.word	0x080026f9
 8002664:	080026f9 	.word	0x080026f9
 8002668:	080026f9 	.word	0x080026f9
 800266c:	080026f9 	.word	0x080026f9
 8002670:	080026f9 	.word	0x080026f9
 8002674:	080026f9 	.word	0x080026f9
 8002678:	080026f9 	.word	0x080026f9
 800267c:	080026f9 	.word	0x080026f9
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080026f9 	.word	0x080026f9
 8002688:	080026f9 	.word	0x080026f9
 800268c:	080026f9 	.word	0x080026f9
 8002690:	080026f9 	.word	0x080026f9
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080026f9 	.word	0x080026f9
 800269c:	080026f9 	.word	0x080026f9
 80026a0:	080026f9 	.word	0x080026f9
 80026a4:	080026f9 	.word	0x080026f9
 80026a8:	080026cb 	.word	0x080026cb
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d009      	beq.n	80026c4 <Save_EEPROM+0x538>
 80026b0:	e022      	b.n	80026f8 <Save_EEPROM+0x56c>
 80026b2:	2301      	movs	r3, #1
 80026b4:	733b      	strb	r3, [r7, #12]
 80026b6:	e021      	b.n	80026fc <Save_EEPROM+0x570>
 80026b8:	2302      	movs	r3, #2
 80026ba:	733b      	strb	r3, [r7, #12]
 80026bc:	e01e      	b.n	80026fc <Save_EEPROM+0x570>
 80026be:	2303      	movs	r3, #3
 80026c0:	733b      	strb	r3, [r7, #12]
 80026c2:	e01b      	b.n	80026fc <Save_EEPROM+0x570>
 80026c4:	2304      	movs	r3, #4
 80026c6:	733b      	strb	r3, [r7, #12]
 80026c8:	e018      	b.n	80026fc <Save_EEPROM+0x570>
 80026ca:	2305      	movs	r3, #5
 80026cc:	733b      	strb	r3, [r7, #12]
 80026ce:	e015      	b.n	80026fc <Save_EEPROM+0x570>
 80026d0:	2306      	movs	r3, #6
 80026d2:	733b      	strb	r3, [r7, #12]
 80026d4:	e012      	b.n	80026fc <Save_EEPROM+0x570>
 80026d6:	2307      	movs	r3, #7
 80026d8:	733b      	strb	r3, [r7, #12]
 80026da:	e00f      	b.n	80026fc <Save_EEPROM+0x570>
 80026dc:	2308      	movs	r3, #8
 80026de:	733b      	strb	r3, [r7, #12]
 80026e0:	e00c      	b.n	80026fc <Save_EEPROM+0x570>
 80026e2:	2309      	movs	r3, #9
 80026e4:	733b      	strb	r3, [r7, #12]
 80026e6:	e009      	b.n	80026fc <Save_EEPROM+0x570>
 80026e8:	230a      	movs	r3, #10
 80026ea:	733b      	strb	r3, [r7, #12]
 80026ec:	e006      	b.n	80026fc <Save_EEPROM+0x570>
 80026ee:	230b      	movs	r3, #11
 80026f0:	733b      	strb	r3, [r7, #12]
 80026f2:	e003      	b.n	80026fc <Save_EEPROM+0x570>
 80026f4:	200002bc 	.word	0x200002bc
 80026f8:	2300      	movs	r3, #0
 80026fa:	733b      	strb	r3, [r7, #12]
 80026fc:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[Verify_Msg]);
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <Save_EEPROM+0x6e8>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002706:	f000 8082 	beq.w	800280e <Save_EEPROM+0x682>
 800270a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800270e:	f200 809f 	bhi.w	8002850 <Save_EEPROM+0x6c4>
 8002712:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002716:	d07d      	beq.n	8002814 <Save_EEPROM+0x688>
 8002718:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800271c:	f200 8098 	bhi.w	8002850 <Save_EEPROM+0x6c4>
 8002720:	2bc8      	cmp	r3, #200	; 0xc8
 8002722:	d07a      	beq.n	800281a <Save_EEPROM+0x68e>
 8002724:	2bc8      	cmp	r3, #200	; 0xc8
 8002726:	f200 8093 	bhi.w	8002850 <Save_EEPROM+0x6c4>
 800272a:	2b32      	cmp	r3, #50	; 0x32
 800272c:	d86c      	bhi.n	8002808 <Save_EEPROM+0x67c>
 800272e:	2b02      	cmp	r3, #2
 8002730:	f0c0 808e 	bcc.w	8002850 <Save_EEPROM+0x6c4>
 8002734:	3b02      	subs	r3, #2
 8002736:	2b30      	cmp	r3, #48	; 0x30
 8002738:	f200 808a 	bhi.w	8002850 <Save_EEPROM+0x6c4>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <Save_EEPROM+0x5b8>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	0800284b 	.word	0x0800284b
 8002748:	08002851 	.word	0x08002851
 800274c:	08002845 	.word	0x08002845
 8002750:	0800283f 	.word	0x0800283f
 8002754:	08002851 	.word	0x08002851
 8002758:	08002851 	.word	0x08002851
 800275c:	08002851 	.word	0x08002851
 8002760:	08002851 	.word	0x08002851
 8002764:	08002839 	.word	0x08002839
 8002768:	08002851 	.word	0x08002851
 800276c:	08002851 	.word	0x08002851
 8002770:	08002851 	.word	0x08002851
 8002774:	08002851 	.word	0x08002851
 8002778:	08002851 	.word	0x08002851
 800277c:	08002851 	.word	0x08002851
 8002780:	08002851 	.word	0x08002851
 8002784:	08002851 	.word	0x08002851
 8002788:	08002851 	.word	0x08002851
 800278c:	08002833 	.word	0x08002833
 8002790:	08002851 	.word	0x08002851
 8002794:	08002851 	.word	0x08002851
 8002798:	08002851 	.word	0x08002851
 800279c:	08002851 	.word	0x08002851
 80027a0:	08002851 	.word	0x08002851
 80027a4:	08002851 	.word	0x08002851
 80027a8:	08002851 	.word	0x08002851
 80027ac:	08002851 	.word	0x08002851
 80027b0:	08002851 	.word	0x08002851
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002851 	.word	0x08002851
 80027bc:	08002851 	.word	0x08002851
 80027c0:	08002851 	.word	0x08002851
 80027c4:	08002851 	.word	0x08002851
 80027c8:	08002851 	.word	0x08002851
 80027cc:	08002851 	.word	0x08002851
 80027d0:	08002851 	.word	0x08002851
 80027d4:	08002851 	.word	0x08002851
 80027d8:	08002851 	.word	0x08002851
 80027dc:	0800282d 	.word	0x0800282d
 80027e0:	08002851 	.word	0x08002851
 80027e4:	08002851 	.word	0x08002851
 80027e8:	08002851 	.word	0x08002851
 80027ec:	08002851 	.word	0x08002851
 80027f0:	08002851 	.word	0x08002851
 80027f4:	08002851 	.word	0x08002851
 80027f8:	08002851 	.word	0x08002851
 80027fc:	08002851 	.word	0x08002851
 8002800:	08002851 	.word	0x08002851
 8002804:	08002827 	.word	0x08002827
 8002808:	2b64      	cmp	r3, #100	; 0x64
 800280a:	d009      	beq.n	8002820 <Save_EEPROM+0x694>
 800280c:	e020      	b.n	8002850 <Save_EEPROM+0x6c4>
 800280e:	2301      	movs	r3, #1
 8002810:	737b      	strb	r3, [r7, #13]
 8002812:	e01f      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002814:	2302      	movs	r3, #2
 8002816:	737b      	strb	r3, [r7, #13]
 8002818:	e01c      	b.n	8002854 <Save_EEPROM+0x6c8>
 800281a:	2303      	movs	r3, #3
 800281c:	737b      	strb	r3, [r7, #13]
 800281e:	e019      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002820:	2304      	movs	r3, #4
 8002822:	737b      	strb	r3, [r7, #13]
 8002824:	e016      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002826:	2305      	movs	r3, #5
 8002828:	737b      	strb	r3, [r7, #13]
 800282a:	e013      	b.n	8002854 <Save_EEPROM+0x6c8>
 800282c:	2306      	movs	r3, #6
 800282e:	737b      	strb	r3, [r7, #13]
 8002830:	e010      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002832:	2307      	movs	r3, #7
 8002834:	737b      	strb	r3, [r7, #13]
 8002836:	e00d      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002838:	2308      	movs	r3, #8
 800283a:	737b      	strb	r3, [r7, #13]
 800283c:	e00a      	b.n	8002854 <Save_EEPROM+0x6c8>
 800283e:	2309      	movs	r3, #9
 8002840:	737b      	strb	r3, [r7, #13]
 8002842:	e007      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002844:	230a      	movs	r3, #10
 8002846:	737b      	strb	r3, [r7, #13]
 8002848:	e004      	b.n	8002854 <Save_EEPROM+0x6c8>
 800284a:	230b      	movs	r3, #11
 800284c:	737b      	strb	r3, [r7, #13]
 800284e:	e001      	b.n	8002854 <Save_EEPROM+0x6c8>
 8002850:	2300      	movs	r3, #0
 8002852:	737b      	strb	r3, [r7, #13]
 8002854:	bf00      	nop

	return 	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, EEPROM_BUFFER_SIZE_WRITE, EEPROM_TIMEOUT_WRITE);
 8002856:	f107 0208 	add.w	r2, r7, #8
 800285a:	230a      	movs	r3, #10
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2306      	movs	r3, #6
 8002860:	21a0      	movs	r1, #160	; 0xa0
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f002 fdc8 	bl	80053f8 <HAL_I2C_Master_Transmit>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002bc 	.word	0x200002bc

08002878 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "secundaria.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002884:	2100      	movs	r1, #0
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f001 fac0 	bl	8003e0c <HAL_CAN_GetRxMessage>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d113      	bne.n	80028ba <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		Verify_CAN |= 2;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800289e:	701a      	strb	r2, [r3, #0]

		if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d10b      	bne.n	80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
			Secundaria_Receive_Config(&hi2c1, RxData);
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80028b4:	f7ff f8e8 	bl	8001a88 <Secundaria_Receive_Config>
	}

	else
		Verify_CAN &= 1;
}
 80028b8:	e006      	b.n	80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		Verify_CAN &= 1;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80028c6:	701a      	strb	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000270 	.word	0x20000270
 80028d4:	2000023c 	.word	0x2000023c
 80028d8:	20000284 	.word	0x20000284
 80028dc:	200001a0 	.word	0x200001a0

080028e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d118      	bne.n	8002924 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		Acc_Msg[0]++;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028fa:	6013      	str	r3, [r2, #0]
		Acc_Msg[1]++;
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3301      	adds	r3, #1
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002904:	6053      	str	r3, [r2, #4]
		Acc_Msg[2]++;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	3301      	adds	r3, #1
 800290c:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800290e:	6093      	str	r3, [r2, #8]
		Acc_Msg[3]++;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	3301      	adds	r3, #1
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002918:	60d3      	str	r3, [r2, #12]
		Acc_Msg[4]++;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	3301      	adds	r3, #1
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002922:	6113      	str	r3, [r2, #16]
	}
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40001400 	.word	0x40001400
 8002934:	200002a8 	.word	0x200002a8

08002938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_MspInit+0x4c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_MspInit+0x4c>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_MspInit+0x4c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_MspInit+0x4c>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <HAL_MspInit+0x4c>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a86      	ldr	r2, [pc, #536]	; (8002bc0 <HAL_ADC_MspInit+0x238>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d172      	bne.n	8002a90 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	4b85      	ldr	r3, [pc, #532]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a84      	ldr	r2, [pc, #528]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a7d      	ldr	r2, [pc, #500]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 80029fe:	230f      	movs	r3, #15
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a02:	2303      	movs	r3, #3
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	486d      	ldr	r0, [pc, #436]	; (8002bc8 <HAL_ADC_MspInit+0x240>)
 8002a12:	f002 f9e5 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG5_Pin|ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8002a16:	230f      	movs	r3, #15
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	4868      	ldr	r0, [pc, #416]	; (8002bcc <HAL_ADC_MspInit+0x244>)
 8002a2a:	f002 f9d9 	bl	8004de0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a2e:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a30:	4a68      	ldr	r2, [pc, #416]	; (8002bd4 <HAL_ADC_MspInit+0x24c>)
 8002a32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a40:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a56:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a66:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a6c:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a72:	4857      	ldr	r0, [pc, #348]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a74:	f001 fe44 	bl	8004700 <HAL_DMA_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002a7e:	f7fe f8fd 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
 8002a88:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_ADC_MspInit+0x248>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a8e:	e092      	b.n	8002bb6 <HAL_ADC_MspInit+0x22e>
  else if(hadc->Instance==ADC2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_ADC_MspInit+0x250>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f040 808d 	bne.w	8002bb6 <HAL_ADC_MspInit+0x22e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	4a47      	ldr	r2, [pc, #284]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8002aac:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4a40      	ldr	r2, [pc, #256]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_ADC_MspInit+0x23c>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG9_Pin|ANALOG10_Pin|ANALOG11_Pin|ANALOG12_Pin;
 8002b0c:	23f0      	movs	r3, #240	; 0xf0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b10:	2303      	movs	r3, #3
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	482b      	ldr	r0, [pc, #172]	; (8002bcc <HAL_ADC_MspInit+0x244>)
 8002b20:	f002 f95e 	bl	8004de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG13_Pin|ANALOG14_Pin;
 8002b24:	2330      	movs	r3, #48	; 0x30
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b34:	4619      	mov	r1, r3
 8002b36:	4824      	ldr	r0, [pc, #144]	; (8002bc8 <HAL_ADC_MspInit+0x240>)
 8002b38:	f002 f952 	bl	8004de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG15_Pin|ANALOG16_Pin;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b40:	2303      	movs	r3, #3
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4823      	ldr	r0, [pc, #140]	; (8002bdc <HAL_ADC_MspInit+0x254>)
 8002b50:	f002 f946 	bl	8004de0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_ADC_MspInit+0x25c>)
 8002b58:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b60:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b74:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b7c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b84:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002b9a:	4811      	ldr	r0, [pc, #68]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002b9c:	f001 fdb0 	bl	8004700 <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8002ba6:	f7fe f869 	bl	8000c7c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <HAL_ADC_MspInit+0x258>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bb6:	bf00      	nop
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	200000b8 	.word	0x200000b8
 8002bd4:	40026410 	.word	0x40026410
 8002bd8:	40012100 	.word	0x40012100
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	20000118 	.word	0x20000118
 8002be4:	40026440 	.word	0x40026440

08002be8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_CAN_MspInit+0x94>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d134      	bne.n	8002c74 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_CAN_MspInit+0x98>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002c54:	2309      	movs	r3, #9
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <HAL_CAN_MspInit+0x9c>)
 8002c60:	f002 f8be 	bl	8004de0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	2014      	movs	r0, #20
 8002c6a:	f001 fd12 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002c6e:	2014      	movs	r0, #20
 8002c70:	f001 fd2b 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40006400 	.word	0x40006400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020400 	.word	0x40020400

08002c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_I2C_MspInit+0x84>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12b      	bne.n	8002d02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc6:	23c0      	movs	r3, #192	; 0xc0
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cca:	2312      	movs	r3, #18
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480c      	ldr	r0, [pc, #48]	; (8002d14 <HAL_I2C_MspInit+0x8c>)
 8002ce2:	f002 f87d 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_I2C_MspInit+0x88>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d02:	bf00      	nop
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020400 	.word	0x40020400

08002d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_TIM_Base_MspInit+0x48>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d115      	bne.n	8002d56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_TIM_Base_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <HAL_TIM_Base_MspInit+0x4c>)
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_TIM_Base_MspInit+0x4c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2037      	movs	r0, #55	; 0x37
 8002d4c:	f001 fca1 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d50:	2037      	movs	r0, #55	; 0x37
 8002d52:	f001 fcba 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40001400 	.word	0x40001400
 8002d64:	40023800 	.word	0x40023800

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <NMI_Handler+0x4>

08002d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <BusFault_Handler+0x4>

08002d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <UsageFault_Handler+0x4>

08002d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db4:	f000 f8b8 	bl	8002f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <CAN1_RX0_IRQHandler+0x10>)
 8002dc2:	f001 f95b 	bl	800407c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000178 	.word	0x20000178

08002dd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <TIM7_IRQHandler+0x10>)
 8002dd6:	f004 f845 	bl	8006e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200001f4 	.word	0x200001f4

08002de4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <DMA2_Stream0_IRQHandler+0x10>)
 8002dea:	f001 fd8f 	bl	800490c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200000b8 	.word	0x200000b8

08002df8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <DMA2_Stream2_IRQHandler+0x10>)
 8002dfe:	f001 fd85 	bl	800490c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000118 	.word	0x20000118

08002e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <SystemInit+0x20>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <SystemInit+0x20>)
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e36:	490e      	ldr	r1, [pc, #56]	; (8002e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e4c:	4c0b      	ldr	r4, [pc, #44]	; (8002e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e5a:	f7ff ffd7 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f004 fa61 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e62:	f7fd fb51 	bl	8000508 <main>
  bx  lr    
 8002e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e74:	080073c4 	.word	0x080073c4
  ldr r2, =_sbss
 8002e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002e7c:	200002d4 	.word	0x200002d4

08002e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC_IRQHandler>
	...

08002e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <HAL_Init+0x40>)
 8002e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_Init+0x40>)
 8002e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_Init+0x40>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eac:	2003      	movs	r0, #3
 8002eae:	f001 fbe5 	bl	800467c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb2:	200f      	movs	r0, #15
 8002eb4:	f000 f808 	bl	8002ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb8:	f7ff fd3e 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023c00 	.word	0x40023c00

08002ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_InitTick+0x54>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_InitTick+0x58>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fbfd 	bl	80046e6 <HAL_SYSTICK_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00e      	b.n	8002f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d80a      	bhi.n	8002f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002efc:	2200      	movs	r2, #0
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f001 fbc5 	bl	8004692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <HAL_InitTick+0x5c>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000008 	.word	0x20000008
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x20>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_IncTick+0x24>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <HAL_IncTick+0x24>)
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	200002d0 	.word	0x200002d0

08002f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return uwTick;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_GetTick+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	200002d0 	.word	0x200002d0

08002f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e033      	b.n	8002fe6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fcfe 	bl	8002988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fae:	f023 0302 	bic.w	r3, r3, #2
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa78 	bl	80034b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd6:	e001      	b.n	8002fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Start_DMA+0x1e>
 800300a:	2302      	movs	r3, #2
 800300c:	e0e9      	b.n	80031e2 <HAL_ADC_Start_DMA+0x1f2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d018      	beq.n	8003056 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003034:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_ADC_Start_DMA+0x1fc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <HAL_ADC_Start_DMA+0x200>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9a      	lsrs	r2, r3, #18
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003048:	e002      	b.n	8003050 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3b01      	subs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f9      	bne.n	800304a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003064:	d107      	bne.n	8003076 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003074:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	f040 80a1 	bne.w	80031c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c4:	d106      	bne.n	80030d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f023 0206 	bic.w	r2, r3, #6
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
 80030d2:	e002      	b.n	80030da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_ADC_Start_DMA+0x204>)
 80030e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	4a43      	ldr	r2, [pc, #268]	; (80031f8 <HAL_ADC_Start_DMA+0x208>)
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	4a42      	ldr	r2, [pc, #264]	; (80031fc <HAL_ADC_Start_DMA+0x20c>)
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_ADC_Start_DMA+0x210>)
 80030fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003106:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003116:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003126:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	334c      	adds	r3, #76	; 0x4c
 8003132:	4619      	mov	r1, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f001 fb90 	bl	800485c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2b00      	cmp	r3, #0
 8003146:	d12a      	bne.n	800319e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_ADC_Start_DMA+0x214>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d015      	beq.n	800317e <HAL_ADC_Start_DMA+0x18e>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_ADC_Start_DMA+0x218>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d105      	bne.n	8003168 <HAL_ADC_Start_DMA+0x178>
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_ADC_Start_DMA+0x204>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a27      	ldr	r2, [pc, #156]	; (800320c <HAL_ADC_Start_DMA+0x21c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d136      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_ADC_Start_DMA+0x204>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d129      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	e020      	b.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_ADC_Start_DMA+0x214>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d11b      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d114      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	e00b      	b.n	80031e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000000 	.word	0x20000000
 80031f0:	431bde83 	.word	0x431bde83
 80031f4:	40012300 	.word	0x40012300
 80031f8:	080036a9 	.word	0x080036a9
 80031fc:	08003763 	.word	0x08003763
 8003200:	0800377f 	.word	0x0800377f
 8003204:	40012000 	.word	0x40012000
 8003208:	40012100 	.word	0x40012100
 800320c:	40012200 	.word	0x40012200

08003210 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e113      	b.n	8003490 <HAL_ADC_ConfigChannel+0x244>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d925      	bls.n	80032c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43da      	mvns	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	400a      	ands	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4403      	add	r3, r0
 80032b6:	3b1e      	subs	r3, #30
 80032b8:	409a      	lsls	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	e022      	b.n	800330a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	2207      	movs	r2, #7
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4403      	add	r3, r0
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d824      	bhi.n	800335c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b05      	subs	r3, #5
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b05      	subs	r3, #5
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	e04c      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d824      	bhi.n	80033ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b23      	subs	r3, #35	; 0x23
 8003376:	221f      	movs	r2, #31
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	400a      	ands	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	4618      	mov	r0, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3b23      	subs	r3, #35	; 0x23
 80033a0:	fa00 f203 	lsl.w	r2, r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
 80033ac:	e023      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b41      	subs	r3, #65	; 0x41
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b41      	subs	r3, #65	; 0x41
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_ADC_ConfigChannel+0x250>)
 80033f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <HAL_ADC_ConfigChannel+0x254>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d8>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b12      	cmp	r3, #18
 800340a:	d10b      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_ADC_ConfigChannel+0x254>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12b      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_ADC_ConfigChannel+0x258>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <HAL_ADC_ConfigChannel+0x1f4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b11      	cmp	r3, #17
 800343e:	d122      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_ADC_ConfigChannel+0x258>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_ADC_ConfigChannel+0x260>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	0c9a      	lsrs	r2, r3, #18
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003478:	e002      	b.n	8003480 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f9      	bne.n	800347a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40012300 	.word	0x40012300
 80034a0:	40012000 	.word	0x40012000
 80034a4:	10000012 	.word	0x10000012
 80034a8:	20000000 	.word	0x20000000
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <ADC_Init+0x1f0>)
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <ADC_Init+0x1f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e00f      	b.n	80035ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800359c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0202 	bic.w	r2, r2, #2
 80035bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	005a      	lsls	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	3b01      	subs	r3, #1
 8003608:	035a      	lsls	r2, r3, #13
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e007      	b.n	8003624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003622:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	3b01      	subs	r3, #1
 8003640:	051a      	lsls	r2, r3, #20
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003666:	025a      	lsls	r2, r3, #9
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	029a      	lsls	r2, r3, #10
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	0f000001 	.word	0x0f000001

080036a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13c      	bne.n	800373c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d12b      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d127      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d119      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0220 	bic.w	r2, r2, #32
 800370e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff fd6b 	bl	8003210 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800373a:	e00e      	b.n	800375a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fd75 	bl	8003238 <HAL_ADC_ErrorCallback>
}
 800374e:	e004      	b.n	800375a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fd57 	bl	8003224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fd4a 	bl	8003238 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0ed      	b.n	800399a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fa0c 	bl	8002be8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e0:	f7ff fbb6 	bl	8002f50 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037e6:	e012      	b.n	800380e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037e8:	f7ff fbb2 	bl	8002f50 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b0a      	cmp	r3, #10
 80037f4:	d90b      	bls.n	800380e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2205      	movs	r2, #5
 8003806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0c5      	b.n	800399a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0e5      	beq.n	80037e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0202 	bic.w	r2, r2, #2
 800382a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800382c:	f7ff fb90 	bl	8002f50 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003832:	e012      	b.n	800385a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003834:	f7ff fb8c 	bl	8002f50 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b0a      	cmp	r3, #10
 8003840:	d90b      	bls.n	800385a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2205      	movs	r2, #5
 8003852:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e09f      	b.n	800399a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7e1b      	ldrb	r3, [r3, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e007      	b.n	8003892 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7e5b      	ldrb	r3, [r3, #25]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e9b      	ldrb	r3, [r3, #26]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0220 	bic.w	r2, r2, #32
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7edb      	ldrb	r3, [r3, #27]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0210 	bic.w	r2, r2, #16
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e007      	b.n	8003910 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0210 	orr.w	r2, r2, #16
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7f1b      	ldrb	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0208 	orr.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7f5b      	ldrb	r3, [r3, #29]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d108      	bne.n	8003954 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0204 	orr.w	r2, r2, #4
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	ea42 0103 	orr.w	r1, r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d003      	beq.n	80039ca <HAL_CAN_ConfigFilter+0x26>
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	f040 80be 	bne.w	8003b46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_CAN_ConfigFilter+0x1bc>)
 80039cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	431a      	orrs	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d123      	bne.n	8003a74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3248      	adds	r2, #72	; 0x48
 8003a54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	3348      	adds	r3, #72	; 0x48
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d122      	bne.n	8003ac2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3248      	adds	r2, #72	; 0x48
 8003aa2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ab6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	3348      	adds	r3, #72	; 0x48
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003adc:	e007      	b.n	8003aee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b08:	e007      	b.n	8003b1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b38:	f023 0201 	bic.w	r2, r3, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e006      	b.n	8003b54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40006400 	.word	0x40006400

08003b64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d12e      	bne.n	8003bd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b90:	f7ff f9de 	bl	8002f50 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b96:	e012      	b.n	8003bbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b98:	f7ff f9da 	bl	8002f50 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	d90b      	bls.n	8003bbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e012      	b.n	8003be4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d003      	beq.n	8003c18 <HAL_CAN_AddTxMessage+0x2c>
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 80b8 	bne.w	8003d88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80a0 	beq.w	8003d78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	0e1b      	lsrs	r3, r3, #24
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d907      	bls.n	8003c58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e09e      	b.n	8003d96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	6809      	ldr	r1, [r1, #0]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	440b      	add	r3, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e00f      	b.n	8003ca6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	440b      	add	r3, r1
 8003ca4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	7d1b      	ldrb	r3, [r3, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d111      	bne.n	8003ce6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	6811      	ldr	r1, [r2, #0]
 8003cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3307      	adds	r3, #7
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	061a      	lsls	r2, r3, #24
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3305      	adds	r3, #5
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	4313      	orrs	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	3204      	adds	r2, #4
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	4610      	mov	r0, r2
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	ea43 0200 	orr.w	r2, r3, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3303      	adds	r3, #3
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	061a      	lsls	r2, r3, #24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3302      	adds	r3, #2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3301      	adds	r3, #1
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	4610      	mov	r0, r2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	6811      	ldr	r1, [r2, #0]
 8003d44:	ea43 0200 	orr.w	r2, r3, r0
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	6811      	ldr	r1, [r2, #0]
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	440b      	add	r3, r1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e00e      	b.n	8003d96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e006      	b.n	8003d96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d11d      	bne.n	8003dfe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3301      	adds	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d003      	beq.n	8003e30 <HAL_CAN_GetRxMessage+0x24>
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f040 80f3 	bne.w	8004016 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0e7      	b.n	8004024 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0d8      	b.n	8004024 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	331b      	adds	r3, #27
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	4413      	add	r3, r2
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0204 	and.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10c      	bne.n	8003eaa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	331b      	adds	r3, #27
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	4413      	add	r3, r2
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0d5b      	lsrs	r3, r3, #21
 8003ea0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e00b      	b.n	8003ec2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	331b      	adds	r3, #27
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	4413      	add	r3, r2
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	331b      	adds	r3, #27
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4413      	add	r3, r2
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0202 	and.w	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	331b      	adds	r3, #27
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	331b      	adds	r3, #27
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	4413      	add	r3, r2
 8003efc:	3304      	adds	r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	331b      	adds	r3, #27
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0a1a      	lsrs	r2, r3, #8
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0c1a      	lsrs	r2, r3, #16
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	3302      	adds	r3, #2
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e1a      	lsrs	r2, r3, #24
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	3303      	adds	r3, #3
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	3304      	adds	r3, #4
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0a1a      	lsrs	r2, r3, #8
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	3305      	adds	r3, #5
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	0c1a      	lsrs	r2, r3, #16
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3306      	adds	r3, #6
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e1a      	lsrs	r2, r3, #24
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	3307      	adds	r3, #7
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0220 	orr.w	r2, r2, #32
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e007      	b.n	8004012 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0220 	orr.w	r2, r2, #32
 8004010:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e006      	b.n	8004024 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d002      	beq.n	800404e <HAL_CAN_ActivateNotification+0x1e>
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d109      	bne.n	8004062 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e006      	b.n	8004070 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d07c      	beq.n	80041bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d023      	beq.n	8004114 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f983 	bl	80043ea <HAL_CAN_TxMailbox0CompleteCallback>
 80040e4:	e016      	b.n	8004114 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	e00c      	b.n	8004114 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e002      	b.n	8004114 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f989 	bl	8004426 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d024      	beq.n	8004168 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004126:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f963 	bl	80043fe <HAL_CAN_TxMailbox1CompleteCallback>
 8004138:	e016      	b.n	8004168 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e00c      	b.n	8004168 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	e002      	b.n	8004168 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f969 	bl	800443a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d024      	beq.n	80041bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800417a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f943 	bl	8004412 <HAL_CAN_TxMailbox2CompleteCallback>
 800418c:	e016      	b.n	80041bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
 80041a0:	e00c      	b.n	80041bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e002      	b.n	80041bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f949 	bl	800444e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2210      	movs	r2, #16
 80041de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2208      	movs	r2, #8
 80041fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f930 	bl	8004462 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fb2c 	bl	8002878 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2208      	movs	r2, #8
 800425e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f912 	bl	800448a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8f9 	bl	8004476 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2210      	movs	r2, #16
 800429e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8fc 	bl	800449e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2208      	movs	r2, #8
 80042c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8f5 	bl	80044b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d07b      	beq.n	80043ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d072      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	2b00      	cmp	r3, #0
 8004338:	d043      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03e      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434a:	2b60      	cmp	r3, #96	; 0x60
 800434c:	d02b      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x32a>
 800434e:	2b60      	cmp	r3, #96	; 0x60
 8004350:	d82e      	bhi.n	80043b0 <HAL_CAN_IRQHandler+0x334>
 8004352:	2b50      	cmp	r3, #80	; 0x50
 8004354:	d022      	beq.n	800439c <HAL_CAN_IRQHandler+0x320>
 8004356:	2b50      	cmp	r3, #80	; 0x50
 8004358:	d82a      	bhi.n	80043b0 <HAL_CAN_IRQHandler+0x334>
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d019      	beq.n	8004392 <HAL_CAN_IRQHandler+0x316>
 800435e:	2b40      	cmp	r3, #64	; 0x40
 8004360:	d826      	bhi.n	80043b0 <HAL_CAN_IRQHandler+0x334>
 8004362:	2b30      	cmp	r3, #48	; 0x30
 8004364:	d010      	beq.n	8004388 <HAL_CAN_IRQHandler+0x30c>
 8004366:	2b30      	cmp	r3, #48	; 0x30
 8004368:	d822      	bhi.n	80043b0 <HAL_CAN_IRQHandler+0x334>
 800436a:	2b10      	cmp	r3, #16
 800436c:	d002      	beq.n	8004374 <HAL_CAN_IRQHandler+0x2f8>
 800436e:	2b20      	cmp	r3, #32
 8004370:	d005      	beq.n	800437e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004372:	e01d      	b.n	80043b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f043 0308 	orr.w	r3, r3, #8
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800437c:	e019      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004386:	e014      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004390:	e00f      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800439a:	e00a      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043a4:	e005      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043ae:	e000      	b.n	80043b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80043b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2204      	movs	r2, #4
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f872 	bl	80044c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043e2:	bf00      	nop
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <__NVIC_SetPriorityGrouping+0x44>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f8:	4013      	ands	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <__NVIC_SetPriorityGrouping+0x44>)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	60d3      	str	r3, [r2, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <__NVIC_GetPriorityGrouping+0x18>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	f003 0307 	and.w	r3, r3, #7
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	2b00      	cmp	r3, #0
 8004550:	db0b      	blt.n	800456a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	4907      	ldr	r1, [pc, #28]	; (8004578 <__NVIC_EnableIRQ+0x38>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2001      	movs	r0, #1
 8004562:	fa00 f202 	lsl.w	r2, r0, r2
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e100 	.word	0xe000e100

0800457c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db0a      	blt.n	80045a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	490c      	ldr	r1, [pc, #48]	; (80045c8 <__NVIC_SetPriority+0x4c>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	440b      	add	r3, r1
 80045a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a4:	e00a      	b.n	80045bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <__NVIC_SetPriority+0x50>)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3b04      	subs	r3, #4
 80045b4:	0112      	lsls	r2, r2, #4
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	440b      	add	r3, r1
 80045ba:	761a      	strb	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f1c3 0307 	rsb	r3, r3, #7
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	bf28      	it	cs
 80045ee:	2304      	movcs	r3, #4
 80045f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d902      	bls.n	8004600 <NVIC_EncodePriority+0x30>
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3b03      	subs	r3, #3
 80045fe:	e000      	b.n	8004602 <NVIC_EncodePriority+0x32>
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43da      	mvns	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	401a      	ands	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004618:	f04f 31ff 	mov.w	r1, #4294967295
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	43d9      	mvns	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	4313      	orrs	r3, r2
         );
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004648:	d301      	bcc.n	800464e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800464a:	2301      	movs	r3, #1
 800464c:	e00f      	b.n	800466e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <SysTick_Config+0x40>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3b01      	subs	r3, #1
 8004654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004656:	210f      	movs	r1, #15
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	f7ff ff8e 	bl	800457c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <SysTick_Config+0x40>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <SysTick_Config+0x40>)
 8004668:	2207      	movs	r2, #7
 800466a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000e010 	.word	0xe000e010

0800467c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff29 	bl	80044dc <__NVIC_SetPriorityGrouping>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a4:	f7ff ff3e 	bl	8004524 <__NVIC_GetPriorityGrouping>
 80046a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff ff8e 	bl	80045d0 <NVIC_EncodePriority>
 80046b4:	4602      	mov	r2, r0
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff5d 	bl	800457c <__NVIC_SetPriority>
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff31 	bl	8004540 <__NVIC_EnableIRQ>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ffa2 	bl	8004638 <SysTick_Config>
 80046f4:	4603      	mov	r3, r0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7fe fc20 	bl	8002f50 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e099      	b.n	8004850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473c:	e00f      	b.n	800475e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800473e:	f7fe fc07 	bl	8002f50 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b05      	cmp	r3, #5
 800474a:	d908      	bls.n	800475e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e078      	b.n	8004850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e8      	bne.n	800473e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_DMA_Init+0x158>)
 8004778:	4013      	ands	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4313      	orrs	r3, r2
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d117      	bne.n	8004822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa6f 	bl	8004ce8 <DMA_CheckFifoParam>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800481e:	2301      	movs	r3, #1
 8004820:	e016      	b.n	8004850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa26 	bl	8004c7c <DMA_CalcBaseAndBitshift>
 8004830:	4603      	mov	r3, r0
 8004832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	223f      	movs	r2, #63	; 0x3f
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	f010803f 	.word	0xf010803f

0800485c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_DMA_Start_IT+0x26>
 800487e:	2302      	movs	r3, #2
 8004880:	e040      	b.n	8004904 <HAL_DMA_Start_IT+0xa8>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d12f      	bne.n	80048f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9b8 	bl	8004c20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	223f      	movs	r2, #63	; 0x3f
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0216 	orr.w	r2, r2, #22
 80048ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e005      	b.n	8004902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
 8004900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004918:	4b8e      	ldr	r3, [pc, #568]	; (8004b54 <HAL_DMA_IRQHandler+0x248>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a8e      	ldr	r2, [pc, #568]	; (8004b58 <HAL_DMA_IRQHandler+0x24c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2208      	movs	r2, #8
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01a      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2208      	movs	r2, #8
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	2204      	movs	r2, #4
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2204      	movs	r2, #4
 80049d2:	409a      	lsls	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	2210      	movs	r2, #16
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d043      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2210      	movs	r2, #16
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d024      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
 8004a3a:	e01f      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e016      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0208 	bic.w	r2, r2, #8
 8004a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	2220      	movs	r2, #32
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 808f 	beq.w	8004bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8087 	beq.w	8004bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d136      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0216 	bic.w	r2, r2, #22
 8004ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x1da>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0208 	bic.w	r2, r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	223f      	movs	r2, #63	; 0x3f
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d07e      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
        }
        return;
 8004b22:	e079      	b.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01d      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
 8004b50:	e02c      	b.n	8004bac <HAL_DMA_IRQHandler+0x2a0>
 8004b52:	bf00      	nop
 8004b54:	20000000 	.word	0x20000000
 8004b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e01e      	b.n	8004bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10f      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0210 	bic.w	r2, r2, #16
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d032      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d307      	bcc.n	8004bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f2      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x2cc>
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
 8004c16:	e000      	b.n	8004c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c18:	bf00      	nop
    }
  }
}
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d108      	bne.n	8004c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c5e:	e007      	b.n	8004c70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	60da      	str	r2, [r3, #12]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3b10      	subs	r3, #16
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d909      	bls.n	8004cbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	659a      	str	r2, [r3, #88]	; 0x58
 8004cbc:	e007      	b.n	8004cce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	080073ac 	.word	0x080073ac

08004ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11f      	bne.n	8004d42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d856      	bhi.n	8004db6 <DMA_CheckFifoParam+0xce>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <DMA_CheckFifoParam+0x28>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d33 	.word	0x08004d33
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004db7 	.word	0x08004db7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d046      	beq.n	8004dba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e043      	b.n	8004dba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d3a:	d140      	bne.n	8004dbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d40:	e03d      	b.n	8004dbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4a:	d121      	bne.n	8004d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d837      	bhi.n	8004dc2 <DMA_CheckFifoParam+0xda>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <DMA_CheckFifoParam+0x70>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d6f 	.word	0x08004d6f
 8004d60:	08004d69 	.word	0x08004d69
 8004d64:	08004d81 	.word	0x08004d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e030      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d025      	beq.n	8004dc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7e:	e022      	b.n	8004dc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d88:	d11f      	bne.n	8004dca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d8e:	e01c      	b.n	8004dca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d903      	bls.n	8004d9e <DMA_CheckFifoParam+0xb6>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d003      	beq.n	8004da4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d9c:	e018      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
      break;
 8004da2:	e015      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00e      	beq.n	8004dce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e00b      	b.n	8004dce <DMA_CheckFifoParam+0xe6>
      break;
 8004db6:	bf00      	nop
 8004db8:	e00a      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e008      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e006      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e004      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dce:	bf00      	nop
    }
  } 
  
  return status; 
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e165      	b.n	80050c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	f040 8154 	bne.w	80050c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d005      	beq.n	8004e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d130      	bne.n	8004e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d017      	beq.n	8004ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d123      	bne.n	8004f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3208      	adds	r2, #8
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80ae 	beq.w	80050c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4a5c      	ldr	r2, [pc, #368]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f74:	6453      	str	r3, [r2, #68]	; 0x44
 8004f76:	4b5a      	ldr	r3, [pc, #360]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f82:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4f      	ldr	r2, [pc, #316]	; (80050e8 <HAL_GPIO_Init+0x308>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d025      	beq.n	8004ffa <HAL_GPIO_Init+0x21a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a4e      	ldr	r2, [pc, #312]	; (80050ec <HAL_GPIO_Init+0x30c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01f      	beq.n	8004ff6 <HAL_GPIO_Init+0x216>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	; (80050f0 <HAL_GPIO_Init+0x310>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d019      	beq.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4c      	ldr	r2, [pc, #304]	; (80050f4 <HAL_GPIO_Init+0x314>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_GPIO_Init+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_GPIO_Init+0x318>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00d      	beq.n	8004fea <HAL_GPIO_Init+0x20a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4a      	ldr	r2, [pc, #296]	; (80050fc <HAL_GPIO_Init+0x31c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <HAL_GPIO_Init+0x206>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a49      	ldr	r2, [pc, #292]	; (8005100 <HAL_GPIO_Init+0x320>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d101      	bne.n	8004fe2 <HAL_GPIO_Init+0x202>
 8004fde:	2306      	movs	r3, #6
 8004fe0:	e00c      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e00a      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fe6:	2305      	movs	r3, #5
 8004fe8:	e008      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fea:	2304      	movs	r3, #4
 8004fec:	e006      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e004      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e002      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f002 0203 	and.w	r2, r2, #3
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	4093      	lsls	r3, r2
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500c:	4935      	ldr	r1, [pc, #212]	; (80050e4 <HAL_GPIO_Init+0x304>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	3302      	adds	r3, #2
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800501a:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_GPIO_Init+0x324>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800503e:	4a31      	ldr	r2, [pc, #196]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005044:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005068:	4a26      	ldr	r2, [pc, #152]	; (8005104 <HAL_GPIO_Init+0x324>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800506e:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_GPIO_Init+0x324>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050bc:	4a11      	ldr	r2, [pc, #68]	; (8005104 <HAL_GPIO_Init+0x324>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	f67f ae96 	bls.w	8004dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	3724      	adds	r7, #36	; 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40020000 	.word	0x40020000
 80050ec:	40020400 	.word	0x40020400
 80050f0:	40020800 	.word	0x40020800
 80050f4:	40020c00 	.word	0x40020c00
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40021400 	.word	0x40021400
 8005100:	40021800 	.word	0x40021800
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005124:	e003      	b.n	800512e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4013      	ands	r3, r2
 8005152:	041a      	lsls	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	43d9      	mvns	r1, r3
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	400b      	ands	r3, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	619a      	str	r2, [r3, #24]
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e12b      	b.n	80053da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fd fd76 	bl	8002c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051d4:	f001 f8a4 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 80051d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4a81      	ldr	r2, [pc, #516]	; (80053e4 <HAL_I2C_Init+0x274>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d807      	bhi.n	80051f4 <HAL_I2C_Init+0x84>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a80      	ldr	r2, [pc, #512]	; (80053e8 <HAL_I2C_Init+0x278>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bf94      	ite	ls
 80051ec:	2301      	movls	r3, #1
 80051ee:	2300      	movhi	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e006      	b.n	8005202 <HAL_I2C_Init+0x92>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a7d      	ldr	r2, [pc, #500]	; (80053ec <HAL_I2C_Init+0x27c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bf94      	ite	ls
 80051fc:	2301      	movls	r3, #1
 80051fe:	2300      	movhi	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e0e7      	b.n	80053da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a78      	ldr	r2, [pc, #480]	; (80053f0 <HAL_I2C_Init+0x280>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0c9b      	lsrs	r3, r3, #18
 8005214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a6a      	ldr	r2, [pc, #424]	; (80053e4 <HAL_I2C_Init+0x274>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <HAL_I2C_Init+0xd4>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3301      	adds	r3, #1
 8005242:	e009      	b.n	8005258 <HAL_I2C_Init+0xe8>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	4a69      	ldr	r2, [pc, #420]	; (80053f4 <HAL_I2C_Init+0x284>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	3301      	adds	r3, #1
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	430b      	orrs	r3, r1
 800525e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800526a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	495c      	ldr	r1, [pc, #368]	; (80053e4 <HAL_I2C_Init+0x274>)
 8005274:	428b      	cmp	r3, r1
 8005276:	d819      	bhi.n	80052ac <HAL_I2C_Init+0x13c>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e59      	subs	r1, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	fbb1 f3f3 	udiv	r3, r1, r3
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	f640 73fc 	movw	r3, #4092	; 0xffc
 800528c:	400b      	ands	r3, r1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_I2C_Init+0x138>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1e59      	subs	r1, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a0:	3301      	adds	r3, #1
 80052a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a6:	e051      	b.n	800534c <HAL_I2C_Init+0x1dc>
 80052a8:	2304      	movs	r3, #4
 80052aa:	e04f      	b.n	800534c <HAL_I2C_Init+0x1dc>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d111      	bne.n	80052d8 <HAL_I2C_Init+0x168>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1e58      	subs	r0, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	440b      	add	r3, r1
 80052c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c6:	3301      	adds	r3, #1
 80052c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e012      	b.n	80052fe <HAL_I2C_Init+0x18e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1e58      	subs	r0, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	0099      	lsls	r1, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ee:	3301      	adds	r3, #1
 80052f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Init+0x196>
 8005302:	2301      	movs	r3, #1
 8005304:	e022      	b.n	800534c <HAL_I2C_Init+0x1dc>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10e      	bne.n	800532c <HAL_I2C_Init+0x1bc>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1e58      	subs	r0, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	440b      	add	r3, r1
 800531c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005320:	3301      	adds	r3, #1
 8005322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532a:	e00f      	b.n	800534c <HAL_I2C_Init+0x1dc>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1e58      	subs	r0, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	0099      	lsls	r1, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005342:	3301      	adds	r3, #1
 8005344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	6809      	ldr	r1, [r1, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800537a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6911      	ldr	r1, [r2, #16]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68d2      	ldr	r2, [r2, #12]
 8005386:	4311      	orrs	r1, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	430b      	orrs	r3, r1
 800538e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	000186a0 	.word	0x000186a0
 80053e8:	001e847f 	.word	0x001e847f
 80053ec:	003d08ff 	.word	0x003d08ff
 80053f0:	431bde83 	.word	0x431bde83
 80053f4:	10624dd3 	.word	0x10624dd3

080053f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	461a      	mov	r2, r3
 8005404:	460b      	mov	r3, r1
 8005406:	817b      	strh	r3, [r7, #10]
 8005408:	4613      	mov	r3, r2
 800540a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7fd fda0 	bl	8002f50 <HAL_GetTick>
 8005410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	f040 80e0 	bne.w	80055e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2319      	movs	r3, #25
 8005426:	2201      	movs	r2, #1
 8005428:	4970      	ldr	r1, [pc, #448]	; (80055ec <HAL_I2C_Master_Transmit+0x1f4>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fc58 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
 8005438:	e0d3      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_I2C_Master_Transmit+0x50>
 8005444:	2302      	movs	r3, #2
 8005446:	e0cc      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d007      	beq.n	800546e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2221      	movs	r2, #33	; 0x21
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2210      	movs	r2, #16
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	893a      	ldrh	r2, [r7, #8]
 800549e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a50      	ldr	r2, [pc, #320]	; (80055f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054b0:	8979      	ldrh	r1, [r7, #10]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fac2 	bl	8005a40 <I2C_MasterRequestWrite>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e08d      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054dc:	e066      	b.n	80055ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fcd2 	bl	8005e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d107      	bne.n	8005506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e06b      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d11b      	bne.n	8005580 <HAL_I2C_Master_Transmit+0x188>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d017      	beq.n	8005580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	6a39      	ldr	r1, [r7, #32]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fcc2 	bl	8005f0e <I2C_WaitOnBTFFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e01a      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d194      	bne.n	80054de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	e000      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
  }
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	00100002 	.word	0x00100002
 80055f0:	ffff0000 	.word	0xffff0000

080055f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	; 0x30
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	461a      	mov	r2, r3
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
 8005604:	4613      	mov	r3, r2
 8005606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005608:	f7fd fca2 	bl	8002f50 <HAL_GetTick>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	f040 820b 	bne.w	8005a32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2319      	movs	r3, #25
 8005622:	2201      	movs	r2, #1
 8005624:	497c      	ldr	r1, [pc, #496]	; (8005818 <HAL_I2C_Master_Receive+0x224>)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fb5a 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005632:	2302      	movs	r3, #2
 8005634:	e1fe      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_I2C_Master_Receive+0x50>
 8005640:	2302      	movs	r3, #2
 8005642:	e1f7      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d007      	beq.n	800566a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2222      	movs	r2, #34	; 0x22
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2210      	movs	r2, #16
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	893a      	ldrh	r2, [r7, #8]
 800569a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a5c      	ldr	r2, [pc, #368]	; (800581c <HAL_I2C_Master_Receive+0x228>)
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056ac:	8979      	ldrh	r1, [r7, #10]
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fa46 	bl	8005b44 <I2C_MasterRequestRead>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1b8      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e18c      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11b      	bne.n	8005732 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e16c      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	2b02      	cmp	r3, #2
 8005738:	d11b      	bne.n	8005772 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	e14c      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005798:	e138      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	2b03      	cmp	r3, #3
 80057a0:	f200 80f1 	bhi.w	8005986 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d123      	bne.n	80057f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fbed 	bl	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e139      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057f2:	e10b      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d14e      	bne.n	800589a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2200      	movs	r2, #0
 8005804:	4906      	ldr	r1, [pc, #24]	; (8005820 <HAL_I2C_Master_Receive+0x22c>)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fa6a 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e10e      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
 8005816:	bf00      	nop
 8005818:	00100002 	.word	0x00100002
 800581c:	ffff0000 	.word	0xffff0000
 8005820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005898:	e0b8      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2200      	movs	r2, #0
 80058a2:	4966      	ldr	r1, [pc, #408]	; (8005a3c <HAL_I2C_Master_Receive+0x448>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa1b 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0bf      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	494f      	ldr	r1, [pc, #316]	; (8005a3c <HAL_I2C_Master_Receive+0x448>)
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f9ed 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e091      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005984:	e042      	b.n	8005a0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fb00 	bl	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e04c      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d118      	bne.n	8005a0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f aec2 	bne.w	800579a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3728      	adds	r7, #40	; 0x28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	00010004 	.word	0x00010004

08005a40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d006      	beq.n	8005a6a <I2C_MasterRequestWrite+0x2a>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <I2C_MasterRequestWrite+0x2a>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a68:	d108      	bne.n	8005a7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e00b      	b.n	8005a94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	2b12      	cmp	r3, #18
 8005a82:	d107      	bne.n	8005a94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f91d 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aba:	d103      	bne.n	8005ac4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e035      	b.n	8005b34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad0:	d108      	bne.n	8005ae4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	e01b      	b.n	8005b1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	11db      	asrs	r3, r3, #7
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0306 	and.w	r3, r3, #6
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f063 030f 	orn	r3, r3, #15
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	490e      	ldr	r1, [pc, #56]	; (8005b3c <I2C_MasterRequestWrite+0xfc>)
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f943 	bl	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e010      	b.n	8005b34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4907      	ldr	r1, [pc, #28]	; (8005b40 <I2C_MasterRequestWrite+0x100>)
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f933 	bl	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	00010008 	.word	0x00010008
 8005b40:	00010002 	.word	0x00010002

08005b44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	460b      	mov	r3, r1
 8005b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d006      	beq.n	8005b7e <I2C_MasterRequestRead+0x3a>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d003      	beq.n	8005b7e <I2C_MasterRequestRead+0x3a>
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b7c:	d108      	bne.n	8005b90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e00b      	b.n	8005ba8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b11      	cmp	r3, #17
 8005b96:	d107      	bne.n	8005ba8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f893 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00d      	beq.n	8005bdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bce:	d103      	bne.n	8005bd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e079      	b.n	8005cd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be4:	d108      	bne.n	8005bf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	e05f      	b.n	8005cb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bf8:	897b      	ldrh	r3, [r7, #10]
 8005bfa:	11db      	asrs	r3, r3, #7
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f063 030f 	orn	r3, r3, #15
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4930      	ldr	r1, [pc, #192]	; (8005cd8 <I2C_MasterRequestRead+0x194>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f8b9 	bl	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e054      	b.n	8005cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4929      	ldr	r1, [pc, #164]	; (8005cdc <I2C_MasterRequestRead+0x198>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8a9 	bl	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e044      	b.n	8005cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f831 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c92:	d103      	bne.n	8005c9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e017      	b.n	8005cd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ca0:	897b      	ldrh	r3, [r7, #10]
 8005ca2:	11db      	asrs	r3, r3, #7
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0306 	and.w	r3, r3, #6
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f063 030e 	orn	r3, r3, #14
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <I2C_MasterRequestRead+0x198>)
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f865 	bl	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	00010008 	.word	0x00010008
 8005cdc:	00010002 	.word	0x00010002

08005ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf0:	e025      	b.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d021      	beq.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfa:	f7fd f929 	bl	8002f50 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d116      	bne.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e023      	b.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10d      	bne.n	8005d64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	e00c      	b.n	8005d7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	43da      	mvns	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf0c      	ite	eq
 8005d76:	2301      	moveq	r3, #1
 8005d78:	2300      	movne	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d0b6      	beq.n	8005cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d9c:	e051      	b.n	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	d123      	bne.n	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f043 0204 	orr.w	r2, r3, #4
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e046      	b.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d021      	beq.n	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fd f8a7 	bl	8002f50 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d116      	bne.n	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f043 0220 	orr.w	r2, r3, #32
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e020      	b.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10c      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	43da      	mvns	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e00b      	b.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	43da      	mvns	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d18d      	bne.n	8005d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e98:	e02d      	b.n	8005ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f8ce 	bl	800603c <I2C_IsAcknowledgeFailed>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e02d      	b.n	8005f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d021      	beq.n	8005ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fd f84d 	bl	8002f50 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d116      	bne.n	8005ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e007      	b.n	8005f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d1ca      	bne.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f1a:	e02d      	b.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f88d 	bl	800603c <I2C_IsAcknowledgeFailed>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e02d      	b.n	8005f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d021      	beq.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f34:	f7fd f80c 	bl	8002f50 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d116      	bne.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e007      	b.n	8005f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d1ca      	bne.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f9c:	e042      	b.n	8006024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d119      	bne.n	8005fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0210 	mvn.w	r2, #16
 8005fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e029      	b.n	8006034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe0:	f7fc ffb6 	bl	8002f50 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d116      	bne.n	8006024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e007      	b.n	8006034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d1b5      	bne.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006052:	d11b      	bne.n	800608c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800605c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	f043 0204 	orr.w	r2, r3, #4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_PWREx_EnableOverDrive+0x90>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <HAL_PWREx_EnableOverDrive+0x90>)
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	; 0x40
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <HAL_PWREx_EnableOverDrive+0x90>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060c2:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <HAL_PWREx_EnableOverDrive+0x94>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060c8:	f7fc ff42 	bl	8002f50 <HAL_GetTick>
 80060cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060ce:	e009      	b.n	80060e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060d0:	f7fc ff3e 	bl	8002f50 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060de:	d901      	bls.n	80060e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e01f      	b.n	8006124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_PWREx_EnableOverDrive+0x98>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d1ee      	bne.n	80060d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f8:	f7fc ff2a 	bl	8002f50 <HAL_GetTick>
 80060fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060fe:	e009      	b.n	8006114 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006100:	f7fc ff26 	bl	8002f50 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610e:	d901      	bls.n	8006114 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e007      	b.n	8006124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_PWREx_EnableOverDrive+0x98>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006120:	d1ee      	bne.n	8006100 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40023800 	.word	0x40023800
 8006130:	420e0040 	.word	0x420e0040
 8006134:	40007000 	.word	0x40007000
 8006138:	420e0044 	.word	0x420e0044

0800613c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0cc      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006150:	4b68      	ldr	r3, [pc, #416]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d90c      	bls.n	8006178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615e:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b63      	ldr	r3, [pc, #396]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b8      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006190:	4b59      	ldr	r3, [pc, #356]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4a58      	ldr	r2, [pc, #352]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800619a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a8:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a52      	ldr	r2, [pc, #328]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b4:	4b50      	ldr	r3, [pc, #320]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	494d      	ldr	r1, [pc, #308]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d044      	beq.n	800625c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	4b47      	ldr	r3, [pc, #284]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d119      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e07f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d003      	beq.n	80061fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fa:	4b3f      	ldr	r3, [pc, #252]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e06f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620a:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e067      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800621a:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f023 0203 	bic.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4934      	ldr	r1, [pc, #208]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	4313      	orrs	r3, r2
 800622a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800622c:	f7fc fe90 	bl	8002f50 <HAL_GetTick>
 8006230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006232:	e00a      	b.n	800624a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006234:	f7fc fe8c 	bl	8002f50 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e04f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 020c 	and.w	r2, r3, #12
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	429a      	cmp	r2, r3
 800625a:	d1eb      	bne.n	8006234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800625c:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d20c      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e032      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4916      	ldr	r1, [pc, #88]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	490e      	ldr	r1, [pc, #56]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062c2:	f000 f841 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	490a      	ldr	r1, [pc, #40]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 80062d4:	5ccb      	ldrb	r3, [r1, r3]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_ClockConfig+0x1c8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fc fdf0 	bl	8002ec8 <HAL_InitTick>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40023c00 	.word	0x40023c00
 80062f8:	40023800 	.word	0x40023800
 80062fc:	08007394 	.word	0x08007394
 8006300:	20000000 	.word	0x20000000
 8006304:	20000004 	.word	0x20000004

08006308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <HAL_RCC_GetHCLKFreq+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000000 	.word	0x20000000

08006320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006324:	f7ff fff0 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0a9b      	lsrs	r3, r3, #10
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	; (8006344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	080073a4 	.word	0x080073a4

08006348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800634c:	b0ae      	sub	sp, #184	; 0xb8
 800634e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636e:	4bcb      	ldr	r3, [pc, #812]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b0c      	cmp	r3, #12
 8006378:	f200 8206 	bhi.w	8006788 <HAL_RCC_GetSysClockFreq+0x440>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_RCC_GetSysClockFreq+0x3c>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063b9 	.word	0x080063b9
 8006388:	08006789 	.word	0x08006789
 800638c:	08006789 	.word	0x08006789
 8006390:	08006789 	.word	0x08006789
 8006394:	080063c1 	.word	0x080063c1
 8006398:	08006789 	.word	0x08006789
 800639c:	08006789 	.word	0x08006789
 80063a0:	08006789 	.word	0x08006789
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	08006789 	.word	0x08006789
 80063ac:	08006789 	.word	0x08006789
 80063b0:	08006789 	.word	0x08006789
 80063b4:	080065b9 	.word	0x080065b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063b8:	4bb9      	ldr	r3, [pc, #740]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80063ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80063be:	e1e7      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063c0:	4bb8      	ldr	r3, [pc, #736]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80063c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80063c6:	e1e3      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063c8:	4bb4      	ldr	r3, [pc, #720]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063d4:	4bb1      	ldr	r3, [pc, #708]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d071      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e0:	4bae      	ldr	r3, [pc, #696]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	099b      	lsrs	r3, r3, #6
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80063f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006406:	4622      	mov	r2, r4
 8006408:	462b      	mov	r3, r5
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	0159      	lsls	r1, r3, #5
 8006414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006418:	0150      	lsls	r0, r2, #5
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4621      	mov	r1, r4
 8006420:	1a51      	subs	r1, r2, r1
 8006422:	6439      	str	r1, [r7, #64]	; 0x40
 8006424:	4629      	mov	r1, r5
 8006426:	eb63 0301 	sbc.w	r3, r3, r1
 800642a:	647b      	str	r3, [r7, #68]	; 0x44
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006438:	4649      	mov	r1, r9
 800643a:	018b      	lsls	r3, r1, #6
 800643c:	4641      	mov	r1, r8
 800643e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006442:	4641      	mov	r1, r8
 8006444:	018a      	lsls	r2, r1, #6
 8006446:	4641      	mov	r1, r8
 8006448:	1a51      	subs	r1, r2, r1
 800644a:	63b9      	str	r1, [r7, #56]	; 0x38
 800644c:	4649      	mov	r1, r9
 800644e:	eb63 0301 	sbc.w	r3, r3, r1
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006460:	4649      	mov	r1, r9
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4641      	mov	r1, r8
 8006466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646a:	4641      	mov	r1, r8
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4622      	mov	r2, r4
 8006476:	189b      	adds	r3, r3, r2
 8006478:	633b      	str	r3, [r7, #48]	; 0x30
 800647a:	462b      	mov	r3, r5
 800647c:	460a      	mov	r2, r1
 800647e:	eb42 0303 	adc.w	r3, r2, r3
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006490:	4629      	mov	r1, r5
 8006492:	024b      	lsls	r3, r1, #9
 8006494:	4621      	mov	r1, r4
 8006496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800649a:	4621      	mov	r1, r4
 800649c:	024a      	lsls	r2, r1, #9
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80064b4:	f7f9 fea6 	bl	8000204 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4613      	mov	r3, r2
 80064be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c2:	e067      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c4:	4b75      	ldr	r3, [pc, #468]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	099b      	lsrs	r3, r3, #6
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80064d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064de:	2300      	movs	r3, #0
 80064e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	f04f 0000 	mov.w	r0, #0
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	0159      	lsls	r1, r3, #5
 80064f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f8:	0150      	lsls	r0, r2, #5
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4621      	mov	r1, r4
 8006500:	1a51      	subs	r1, r2, r1
 8006502:	62b9      	str	r1, [r7, #40]	; 0x28
 8006504:	4629      	mov	r1, r5
 8006506:	eb63 0301 	sbc.w	r3, r3, r1
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006518:	4649      	mov	r1, r9
 800651a:	018b      	lsls	r3, r1, #6
 800651c:	4641      	mov	r1, r8
 800651e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006522:	4641      	mov	r1, r8
 8006524:	018a      	lsls	r2, r1, #6
 8006526:	4641      	mov	r1, r8
 8006528:	ebb2 0a01 	subs.w	sl, r2, r1
 800652c:	4649      	mov	r1, r9
 800652e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800653e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006546:	4692      	mov	sl, r2
 8006548:	469b      	mov	fp, r3
 800654a:	4623      	mov	r3, r4
 800654c:	eb1a 0303 	adds.w	r3, sl, r3
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	462b      	mov	r3, r5
 8006554:	eb4b 0303 	adc.w	r3, fp, r3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006566:	4629      	mov	r1, r5
 8006568:	028b      	lsls	r3, r1, #10
 800656a:	4621      	mov	r1, r4
 800656c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006570:	4621      	mov	r1, r4
 8006572:	028a      	lsls	r2, r1, #10
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657c:	2200      	movs	r2, #0
 800657e:	673b      	str	r3, [r7, #112]	; 0x70
 8006580:	677a      	str	r2, [r7, #116]	; 0x74
 8006582:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006586:	f7f9 fe3d 	bl	8000204 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4613      	mov	r3, r2
 8006590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006594:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	3301      	adds	r3, #1
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80065a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80065b6:	e0eb      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065b8:	4b38      	ldr	r3, [pc, #224]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065c4:	4b35      	ldr	r3, [pc, #212]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d06b      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d0:	4b32      	ldr	r3, [pc, #200]	; (800669c <HAL_RCC_GetSysClockFreq+0x354>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	099b      	lsrs	r3, r3, #6
 80065d6:	2200      	movs	r2, #0
 80065d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	663b      	str	r3, [r7, #96]	; 0x60
 80065e4:	2300      	movs	r3, #0
 80065e6:	667b      	str	r3, [r7, #100]	; 0x64
 80065e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80065ec:	4622      	mov	r2, r4
 80065ee:	462b      	mov	r3, r5
 80065f0:	f04f 0000 	mov.w	r0, #0
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	0159      	lsls	r1, r3, #5
 80065fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065fe:	0150      	lsls	r0, r2, #5
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4621      	mov	r1, r4
 8006606:	1a51      	subs	r1, r2, r1
 8006608:	61b9      	str	r1, [r7, #24]
 800660a:	4629      	mov	r1, r5
 800660c:	eb63 0301 	sbc.w	r3, r3, r1
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800661e:	4659      	mov	r1, fp
 8006620:	018b      	lsls	r3, r1, #6
 8006622:	4651      	mov	r1, sl
 8006624:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006628:	4651      	mov	r1, sl
 800662a:	018a      	lsls	r2, r1, #6
 800662c:	4651      	mov	r1, sl
 800662e:	ebb2 0801 	subs.w	r8, r2, r1
 8006632:	4659      	mov	r1, fp
 8006634:	eb63 0901 	sbc.w	r9, r3, r1
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800664c:	4690      	mov	r8, r2
 800664e:	4699      	mov	r9, r3
 8006650:	4623      	mov	r3, r4
 8006652:	eb18 0303 	adds.w	r3, r8, r3
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	462b      	mov	r3, r5
 800665a:	eb49 0303 	adc.w	r3, r9, r3
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800666c:	4629      	mov	r1, r5
 800666e:	024b      	lsls	r3, r1, #9
 8006670:	4621      	mov	r1, r4
 8006672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006676:	4621      	mov	r1, r4
 8006678:	024a      	lsls	r2, r1, #9
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006682:	2200      	movs	r2, #0
 8006684:	65bb      	str	r3, [r7, #88]	; 0x58
 8006686:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800668c:	f7f9 fdba 	bl	8000204 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4613      	mov	r3, r2
 8006696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669a:	e065      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x420>
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a8:	4b3d      	ldr	r3, [pc, #244]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	099b      	lsrs	r3, r3, #6
 80066ae:	2200      	movs	r2, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	4611      	mov	r1, r2
 80066b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066b8:	653b      	str	r3, [r7, #80]	; 0x50
 80066ba:	2300      	movs	r3, #0
 80066bc:	657b      	str	r3, [r7, #84]	; 0x54
 80066be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80066c2:	4642      	mov	r2, r8
 80066c4:	464b      	mov	r3, r9
 80066c6:	f04f 0000 	mov.w	r0, #0
 80066ca:	f04f 0100 	mov.w	r1, #0
 80066ce:	0159      	lsls	r1, r3, #5
 80066d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066d4:	0150      	lsls	r0, r2, #5
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4641      	mov	r1, r8
 80066dc:	1a51      	subs	r1, r2, r1
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	4649      	mov	r1, r9
 80066e2:	eb63 0301 	sbc.w	r3, r3, r1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80066f4:	4659      	mov	r1, fp
 80066f6:	018b      	lsls	r3, r1, #6
 80066f8:	4651      	mov	r1, sl
 80066fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066fe:	4651      	mov	r1, sl
 8006700:	018a      	lsls	r2, r1, #6
 8006702:	4651      	mov	r1, sl
 8006704:	1a54      	subs	r4, r2, r1
 8006706:	4659      	mov	r1, fp
 8006708:	eb63 0501 	sbc.w	r5, r3, r1
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	00eb      	lsls	r3, r5, #3
 8006716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800671a:	00e2      	lsls	r2, r4, #3
 800671c:	4614      	mov	r4, r2
 800671e:	461d      	mov	r5, r3
 8006720:	4643      	mov	r3, r8
 8006722:	18e3      	adds	r3, r4, r3
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	464b      	mov	r3, r9
 8006728:	eb45 0303 	adc.w	r3, r5, r3
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800673a:	4629      	mov	r1, r5
 800673c:	028b      	lsls	r3, r1, #10
 800673e:	4621      	mov	r1, r4
 8006740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006744:	4621      	mov	r1, r4
 8006746:	028a      	lsls	r2, r1, #10
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006750:	2200      	movs	r2, #0
 8006752:	64bb      	str	r3, [r7, #72]	; 0x48
 8006754:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006756:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800675a:	f7f9 fd53 	bl	8000204 <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4613      	mov	r3, r2
 8006764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	0f1b      	lsrs	r3, r3, #28
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800677a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006786:	e003      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800678a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800678e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006794:	4618      	mov	r0, r3
 8006796:	37b8      	adds	r7, #184	; 0xb8
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	00f42400 	.word	0x00f42400

080067a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e28d      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8083 	beq.w	80068ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067c8:	4b94      	ldr	r3, [pc, #592]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 030c 	and.w	r3, r3, #12
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d019      	beq.n	8006808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067d4:	4b91      	ldr	r3, [pc, #580]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067e0:	4b8e      	ldr	r3, [pc, #568]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ec:	d00c      	beq.n	8006808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ee:	4b8b      	ldr	r3, [pc, #556]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067f6:	2b0c      	cmp	r3, #12
 80067f8:	d112      	bne.n	8006820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fa:	4b88      	ldr	r3, [pc, #544]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006806:	d10b      	bne.n	8006820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006808:	4b84      	ldr	r3, [pc, #528]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d05b      	beq.n	80068cc <HAL_RCC_OscConfig+0x124>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d157      	bne.n	80068cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e25a      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006828:	d106      	bne.n	8006838 <HAL_RCC_OscConfig+0x90>
 800682a:	4b7c      	ldr	r3, [pc, #496]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7b      	ldr	r2, [pc, #492]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e01d      	b.n	8006874 <HAL_RCC_OscConfig+0xcc>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0xb4>
 8006842:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a75      	ldr	r2, [pc, #468]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4b73      	ldr	r3, [pc, #460]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a72      	ldr	r2, [pc, #456]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0xcc>
 800685c:	4b6f      	ldr	r3, [pc, #444]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6e      	ldr	r2, [pc, #440]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a6b      	ldr	r2, [pc, #428]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800686e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d013      	beq.n	80068a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687c:	f7fc fb68 	bl	8002f50 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006884:	f7fc fb64 	bl	8002f50 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e21f      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	4b61      	ldr	r3, [pc, #388]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0f0      	beq.n	8006884 <HAL_RCC_OscConfig+0xdc>
 80068a2:	e014      	b.n	80068ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fc fb54 	bl	8002f50 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fc fb50 	bl	8002f50 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	; 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e20b      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	4b57      	ldr	r3, [pc, #348]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x104>
 80068ca:	e000      	b.n	80068ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d06f      	beq.n	80069ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068da:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d017      	beq.n	8006916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068e6:	4b4d      	ldr	r3, [pc, #308]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d105      	bne.n	80068fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068f2:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006906:	2b0c      	cmp	r3, #12
 8006908:	d11c      	bne.n	8006944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690a:	4b44      	ldr	r3, [pc, #272]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d116      	bne.n	8006944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006916:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_RCC_OscConfig+0x186>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d001      	beq.n	800692e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e1d3      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692e:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4937      	ldr	r1, [pc, #220]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006942:	e03a      	b.n	80069ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d020      	beq.n	800698e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800694c:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <HAL_RCC_OscConfig+0x278>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fc fafd 	bl	8002f50 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800695a:	f7fc faf9 	bl	8002f50 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e1b4      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006978:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4925      	ldr	r1, [pc, #148]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 8006988:	4313      	orrs	r3, r2
 800698a:	600b      	str	r3, [r1, #0]
 800698c:	e015      	b.n	80069ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698e:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <HAL_RCC_OscConfig+0x278>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fc fadc 	bl	8002f50 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800699c:	f7fc fad8 	bl	8002f50 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e193      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d036      	beq.n	8006a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fc fabc 	bl	8002f50 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069dc:	f7fc fab8 	bl	8002f50 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e173      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80069f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x234>
 80069fa:	e01b      	b.n	8006a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fc faa5 	bl	8002f50 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a08:	e00e      	b.n	8006a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a0a:	f7fc faa1 	bl	8002f50 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d907      	bls.n	8006a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e15c      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	42470000 	.word	0x42470000
 8006a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a28:	4b8a      	ldr	r3, [pc, #552]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1ea      	bne.n	8006a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8097 	beq.w	8006b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a46:	4b83      	ldr	r3, [pc, #524]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10f      	bne.n	8006a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	4b7f      	ldr	r3, [pc, #508]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	4a7e      	ldr	r2, [pc, #504]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a60:	6413      	str	r3, [r2, #64]	; 0x40
 8006a62:	4b7c      	ldr	r3, [pc, #496]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a72:	4b79      	ldr	r3, [pc, #484]	; (8006c58 <HAL_RCC_OscConfig+0x4b0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d118      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7e:	4b76      	ldr	r3, [pc, #472]	; (8006c58 <HAL_RCC_OscConfig+0x4b0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a75      	ldr	r2, [pc, #468]	; (8006c58 <HAL_RCC_OscConfig+0x4b0>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8a:	f7fc fa61 	bl	8002f50 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a92:	f7fc fa5d 	bl	8002f50 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e118      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa4:	4b6c      	ldr	r3, [pc, #432]	; (8006c58 <HAL_RCC_OscConfig+0x4b0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d106      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x31e>
 8006ab8:	4b66      	ldr	r3, [pc, #408]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	4a65      	ldr	r2, [pc, #404]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac4:	e01c      	b.n	8006b00 <HAL_RCC_OscConfig+0x358>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x340>
 8006ace:	4b61      	ldr	r3, [pc, #388]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	4a60      	ldr	r2, [pc, #384]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006ad4:	f043 0304 	orr.w	r3, r3, #4
 8006ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ada:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	4a5d      	ldr	r2, [pc, #372]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0x358>
 8006ae8:	4b5a      	ldr	r3, [pc, #360]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	4a59      	ldr	r2, [pc, #356]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	6713      	str	r3, [r2, #112]	; 0x70
 8006af4:	4b57      	ldr	r3, [pc, #348]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	4a56      	ldr	r2, [pc, #344]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006afa:	f023 0304 	bic.w	r3, r3, #4
 8006afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d015      	beq.n	8006b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b08:	f7fc fa22 	bl	8002f50 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b10:	f7fc fa1e 	bl	8002f50 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e0d7      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b26:	4b4b      	ldr	r3, [pc, #300]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ee      	beq.n	8006b10 <HAL_RCC_OscConfig+0x368>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fc fa0c 	bl	8002f50 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fc fa08 	bl	8002f50 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0c1      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b52:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1ee      	bne.n	8006b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d105      	bne.n	8006b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b64:	4b3b      	ldr	r3, [pc, #236]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	4a3a      	ldr	r2, [pc, #232]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80ad 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7a:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d060      	beq.n	8006c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d145      	bne.n	8006c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	4b33      	ldr	r3, [pc, #204]	; (8006c5c <HAL_RCC_OscConfig+0x4b4>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fc f9dc 	bl	8002f50 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fc f9d8 	bl	8002f50 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e093      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bae:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	019b      	lsls	r3, r3, #6
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	061b      	lsls	r3, r3, #24
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	491b      	ldr	r1, [pc, #108]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_RCC_OscConfig+0x4b4>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf2:	f7fc f9ad 	bl	8002f50 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7fc f9a9 	bl	8002f50 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e064      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0c:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x452>
 8006c18:	e05c      	b.n	8006cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <HAL_RCC_OscConfig+0x4b4>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fc f996 	bl	8002f50 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fc f992 	bl	8002f50 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e04d      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_OscConfig+0x4ac>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x480>
 8006c46:	e045      	b.n	8006cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e040      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
 8006c54:	40023800 	.word	0x40023800
 8006c58:	40007000 	.word	0x40007000
 8006c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <HAL_RCC_OscConfig+0x538>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d030      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d129      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d122      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d119      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d10f      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d001      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40023800 	.word	0x40023800

08006ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e041      	b.n	8006d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fc f804 	bl	8002d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f000 f9ce 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d001      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e04e      	b.n	8006e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a23      	ldr	r2, [pc, #140]	; (8006e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d022      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d01d      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d018      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00e      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d009      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a19      	ldr	r2, [pc, #100]	; (8006e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x80>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d111      	bne.n	8006e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b06      	cmp	r3, #6
 8006e14:	d010      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e26:	e007      	b.n	8006e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40001800 	.word	0x40001800

08006e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0202 	mvn.w	r2, #2
 8006e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8ee 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8e0 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f8f1 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d122      	bne.n	8006f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d11b      	bne.n	8006f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0204 	mvn.w	r2, #4
 8006ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f8c4 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006f00:	e005      	b.n	8006f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8b6 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8c7 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d122      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d11b      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0208 	mvn.w	r2, #8
 8006f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f89a 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f88c 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f89d 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0310 	and.w	r3, r3, #16
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d122      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d11b      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0210 	mvn.w	r2, #16
 8006f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2208      	movs	r2, #8
 8006f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f870 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006fa8:	e005      	b.n	8006fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f862 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f873 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d107      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0201 	mvn.w	r2, #1
 8006fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb fc7c 	bl	80028e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f97e 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f838 	bl	80070b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b20      	cmp	r3, #32
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b20      	cmp	r3, #32
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0220 	mvn.w	r2, #32
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f948 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a40      	ldr	r2, [pc, #256]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d00f      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3d      	ldr	r2, [pc, #244]	; (80071dc <TIM_Base_SetConfig+0x118>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3a      	ldr	r2, [pc, #232]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d108      	bne.n	8007116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d02b      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007124:	d027      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2c      	ldr	r2, [pc, #176]	; (80071dc <TIM_Base_SetConfig+0x118>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d023      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01f      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01b      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a29      	ldr	r2, [pc, #164]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d017      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a28      	ldr	r2, [pc, #160]	; (80071ec <TIM_Base_SetConfig+0x128>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <TIM_Base_SetConfig+0x12c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00f      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <TIM_Base_SetConfig+0x130>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00b      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a25      	ldr	r2, [pc, #148]	; (80071f8 <TIM_Base_SetConfig+0x134>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d007      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a24      	ldr	r2, [pc, #144]	; (80071fc <TIM_Base_SetConfig+0x138>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a23      	ldr	r2, [pc, #140]	; (8007200 <TIM_Base_SetConfig+0x13c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d108      	bne.n	8007188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0xf8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d103      	bne.n	80071c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	615a      	str	r2, [r3, #20]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40000c00 	.word	0x40000c00
 80071e8:	40010400 	.word	0x40010400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	40001800 	.word	0x40001800
 80071fc:	40001c00 	.word	0x40001c00
 8007200:	40002000 	.word	0x40002000

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e05a      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a21      	ldr	r2, [pc, #132]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007268:	d01d      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4d0d      	ldr	r5, [pc, #52]	; (800735c <__libc_init_array+0x38>)
 8007328:	4c0d      	ldr	r4, [pc, #52]	; (8007360 <__libc_init_array+0x3c>)
 800732a:	1b64      	subs	r4, r4, r5
 800732c:	10a4      	asrs	r4, r4, #2
 800732e:	2600      	movs	r6, #0
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	4d0b      	ldr	r5, [pc, #44]	; (8007364 <__libc_init_array+0x40>)
 8007336:	4c0c      	ldr	r4, [pc, #48]	; (8007368 <__libc_init_array+0x44>)
 8007338:	f000 f820 	bl	800737c <_init>
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	2600      	movs	r6, #0
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	f855 3b04 	ldr.w	r3, [r5], #4
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	f855 3b04 	ldr.w	r3, [r5], #4
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	080073bc 	.word	0x080073bc
 8007360:	080073bc 	.word	0x080073bc
 8007364:	080073bc 	.word	0x080073bc
 8007368:	080073c0 	.word	0x080073c0

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <_init>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr

08007388 <_fini>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr
